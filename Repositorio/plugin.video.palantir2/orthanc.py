import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import re
import glob
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import datetime
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
import traceback
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 85 - 85: oo
try :
 OoOoOo = xbmc . translatePath ( __settings__ . getSetting ( 'MainView' ) )
 OO0oo = xbmc . translatePath ( __settings__ . getSetting ( 'DownView' ) )
 ooO00Oo = xbmc . translatePath ( __settings__ . getSetting ( 'FavView' ) )
 III11i11 = xbmc . translatePath ( __settings__ . getSetting ( 'PelisView' ) )
 IIi = xbmc . translatePath ( __settings__ . getSetting ( 'EpisodesView' ) )
 IIIIiiIIiII1i = xbmc . translatePath ( __settings__ . getSetting ( 'ListView' ) )
 O0ooo0o0OOO = xbmc . translatePath ( __settings__ . getSetting ( 'SeriesView' ) )
 I11I1ii = xbmc . translatePath ( __settings__ . getSetting ( 'MenuColor' ) )
 Iiooo = xbmc . translatePath ( __settings__ . getSetting ( 'HdColor' ) )
 O0000O = xbmc . translatePath ( __settings__ . getSetting ( 'AltColor' ) )
 O000Ooo0o0OOo = xbmc . translatePath ( __settings__ . getSetting ( 'AudioColor' ) )
 OoO0oooOoO0 = xbmc . translatePath ( __settings__ . getSetting ( 'CategoryColor' ) )
 OO0O0 = xbmc . translatePath ( __settings__ . getSetting ( 'DateColor' ) )
 ii1i1ii1I = xbmc . translatePath ( __settings__ . getSetting ( 'CapiColor' ) )
 o0o0000O0 = xbmc . translatePath ( __settings__ . getSetting ( 'PeliColor' ) )
 if not IIIIiiIIiII1i or IIIIiiIIiII1i == 'Programas' :
  IIIIiiIIiII1i = '502'
 if not O0ooo0o0OOO or O0ooo0o0OOO == 'Programas' :
  O0ooo0o0OOO = '515'
 if not OoOoOo or OoOoOo == 'Programas' :
  OoOoOo = '500'
 if not OO0oo or OO0oo == 'Programas' :
  OO0oo = '500'
 if not ooO00Oo or ooO00Oo == 'Programas' :
  ooO00Oo = '500'
 if not III11i11 or III11i11 == 'Programas' :
  III11i11 = '502'
 if not IIi or IIi == 'Programas' :
  IIi = '502'
 if not I11I1ii or I11I1ii == 'Programas' :
  I11I1ii = 'gold'
 if not Iiooo or I11I1ii == 'Programas' :
  Iiooo = 'green'
 if not O0000O or I11I1ii == 'Programas' :
  O0000O = 'white'
 if not O000Ooo0o0OOo or I11I1ii == 'Programas' :
  O000Ooo0o0OOo = 'silver'
 if not O000Ooo0o0OOo or I11I1ii == 'Programas' :
  OoO0oooOoO0 = 'silver'
 if not O000Ooo0o0OOo or I11I1ii == 'Programas' :
  OO0O0 = 'silver'
 if not O000Ooo0o0OOo or I11I1ii == 'Programas' :
  ii1i1ii1I = ''
 if not o0o0000O0 or I11I1ii == 'Programas' :
  o0o0000O0 = ''
except :
 I11I1ii = 'gold'
 Iiooo = 'green'
 O0000O = 'white'
 O000Ooo0o0OOo = 'silver'
 OoO0oooOoO0 = 'silver'
 OO0O0 = 'silver'
 ii1i1ii1I = ''
 o0o0000O0 = ''
 if 70 - 70: I1i1iiIIi % OoO0ooooo
 if 36 - 36: oo00000o0 . oOOoo00oo0oO0
 if 48 - 48: O00O / iiIIi1i1Iii - oOOoo00oo0oO0 % oo % i1iI1 . i1iI1
try :
 import json
except :
 import simplejson as json
 if 34 - 34: OOO / IIII - OOoOoO0o0o0OO / oOOoo00oo0oO0 - oo
 if 99 - 99: oo + oooOoO % oOOoo00oo0oO0 * OoO0ooooo * oo00000o0
def IIIii1Ii ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 89 - 89: OOO / IIII * oo / oOOoo00oo0oO0 - iiIIi1i1Iii * i1iI1
 if 22 - 22: iiIIi1i1Iii + OOoOoO0o0o0OO / ii1I1ii1IiIi1 . oOOoo00oo0oO0
def iiI ( bas ) :
 ithil . OOoo0O0o ( bas )
 if 97 - 97: iiIIi1i1Iii * IiII1IiI % OoO0ooooo
 if 39 - 39: IIoooO0ooO0oo
def iIi1ii1I1iII1 ( ) :
 import xbmc
 II1 = xbmc . Keyboard ( "" )
 II1 . doModal ( )
 oOO0OO0o0O0 = ''
 if ( II1 . isConfirmed ( ) ) :
  oOO0OO0o0O0 = II1 . getText ( )
 return oOO0OO0o0O0
 if 24 - 24: oo00000o0 + i1iI1
 if 12 - 12: ii1I1ii1IiIi1
 if 60 - 60: i1iI1 % o00oO0oo0O0O0
IIiIiiI1ii11 = 'utf-8'
i11i1Ii = '.tmp'
I1i1ii1 = 'action'
o000Ooo0 = xbmcaddon . Addon ( )
oOo0OOooOOOoo = o000Ooo0 . getAddonInfo ( 'version' )
iiIIII1I = xbmc . translatePath ( o000Ooo0 . getAddonInfo ( 'path' ) . decode ( IIiIiiI1ii11 ) )
OOOO00Ooo = xbmc . translatePath ( o000Ooo0 . getAddonInfo ( 'profile' ) . decode ( IIiIiiI1ii11 ) )
oooOoo0o0o = os . path . join ( iiIIII1I , "resources/media/" )
if 43 - 43: I1i1iiIIi * OOO / O00O / o00oO0oo0O0O0 % O00O . IIoooO0ooO0oo
Oo = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( OOOO00Ooo , i11i1Ii )
oOo0oo0 = '%s/bree.fav' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
oOOooo00Oooo = '%s/bree.favd' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
Ooo = '%s/bree.favp' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
oOo = '%s/bree.favs' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
ii1I1Iii = '%s/bree.dwn' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
o0OoO0o = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" ]
i1Ii1II = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" , "active" ]
iI1I1 = [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster" , "updated" , "puntos" , "category" , "active"
 ]
i1iIii = 200
oo0OOO0O = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
ii1i1i1 = 'series'
if 13 - 13: oo + o00oO0oo0O0O0 - oOOoo00oo0oO0 / I1 % IiII1IiI / o00oO0oo0O0O0
if not os . path . exists ( OOOO00Ooo ) :
 try :
  os . makedirs ( OOOO00Ooo )
 except :
  pass
OOo0oOOOO0 = sys . argv [ 0 ]
i111IIiiI1I = int ( sys . argv [ 1 ] )
try :
 if 92 - 92: IIII
 oO = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 oO = 0
 if 6 - 6: oooOoO % I1 . IIoooO0ooO0oo % ii1I1ii1IiIi1
 if 52 - 52: O00O % i1iI1
def ooo0oOOo0O0Oo0 ( path , type = 'r' ) :
 i1 = open ( str ( path ) , type )
 O0 = i1 . read ( )
 i1 . close ( )
 return O0
 if 43 - 43: oooOoO . oo % oOO - oooOoO + OOoOoO0o0o0OO
 if 34 - 34: Ii / I1 + I1i1iiIIi
if os . path . exists ( oOo0oo0 ) == True :
 oO0oOOOOOo0 = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( oOo0oo0 ) ) )
else :
 oO0oOOOOOo0 = { }
 if 10 - 10: IIII
if os . path . exists ( Ooo ) == True :
 iii1iIII1111I = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( Ooo ) ) )
else :
 iii1iIII1111I = { }
 if 22 - 22: IiII1IiI / oOOoo00oo0oO0
if os . path . exists ( oOOooo00Oooo ) == True :
 IIiI11 = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( oOOooo00Oooo ) ) )
else :
 IIiI11 = { }
 if 16 - 16: OoO0ooooo % O00O * IiII1IiI * i1iI1
if os . path . exists ( oOo ) == True :
 Ii1 = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( oOo ) ) )
else :
 Ii1 = { }
 if 90 - 90: oooOoO % O00O % I1i1iiIIi + IIoooO0ooO0oo
 if 42 - 42: OOoOoO0o0o0OO % II / II - II
def OoOO0Ooo ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 Iiii1II1IIi = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  Iiii1II1IIi . setArt ( IiiIi11iIII1 ( caratula , poster ) )
 if len ( video ) > 0 :
  Iiii1II1IIi . setInfo ( 'video' , video )
 if isPlayable :
  Iiii1II1IIi . setProperty ( 'IsPlayable' , 'true' )
 return Iiii1II1IIi
 if 42 - 42: I1i1iiIIi * oooOoO . IiII1IiI + IIII * OOoOoO0o0o0OO
 if 77 - 77: IIII . I1
 if 94 - 94: IIoooO0ooO0oo + oooOoO
def O0oOooOoOo0 ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  oOO00OoO0oo = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 OOo0oOOOO0 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  oOO00OoO0oo = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 OOo0oOOOO0 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return oOO00OoO0oo
 if 96 - 96: oOO % I1i1iiIIi
 if 23 - 23: II / oOO / IiII1IiI - O00O - oo % oo
def OO0OoOoO00 ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  I1II1i1II = 1
 else :
  I1II1i1II = 0
 if int ( idFile ) > 0 :
  OooOO00 = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 I1II1i1II , idFile , idPath , fileName )
 else :
  OooOO00 = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , I1II1i1II , "datetime('now')" )
 anor . I1i1I1iI11I ( OooOO00 )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 99 - 99: Ii . oOOoo00oo0oO0
 if 23 - 23: oooOoO * OOO % I1i1iiIIi . O00O
def Ii1Ii11i1 ( ) :
 ooOoOO00OOoo0 = [ '%s/bree.fav' % OOOO00Ooo , '%s/bree.favd' % OOOO00Ooo , '%s/bree.favp' % OOOO00Ooo , '%s/bree.favs' % OOOO00Ooo , '%s/bree.dwn' % OOOO00Ooo , '%s/settings.xml' % OOOO00Ooo ]
 if 50 - 50: OoO0ooooo
 if 85 - 85: oOOoo00oo0oO0 . II * IIoooO0ooO0oo % II % Ii - oo
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 O0oo00 = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 import zipfile
 import time
 if O0oo00 :
  O0oo00 = xbmc . translatePath ( O0oo00 )
  if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / OoO0ooooo / OOO + o00oO0oo0O0O0
  OooOO0OO = "%s/Palantir_Backup_%s.zip" % ( O0oo00 , time . strftime ( "%d-%m-%Y_%H%M%S" ) )
  oOoo0o0OoO = zipfile . ZipFile ( OooOO0OO , "w" )
  for OOO00Oo00OooO in ooOoOO00OOoo0 :
   if os . path . exists ( OOO00Oo00OooO ) :
    ii = OOO00Oo00OooO . split ( '/' )
    oOoo0o0OoO . write ( OOO00Oo00OooO , ii [ len ( ii ) - 1 ] , compress_type = zipfile . ZIP_DEFLATED )
  oOoo0o0OoO . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Realizada en : %s' % OooOO0OO , xbmcgui . NOTIFICATION_INFO , 10000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Establezca la ruta para la copia' , xbmcgui . NOTIFICATION_INFO , 7000 )
  if 73 - 73: OOoOoO0o0o0OO
  if 62 - 62: Ii . OOoOoO0o0o0OO
  if 10 - 10: IIII
def oooOOOOoO ( ) :
 OoOo0OO0o = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 IIiI = xbmcgui . Dialog ( )
 try :
  O0oo00 = IIiI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False , defaultt = OoOo0OO0o ,
 enableMultiple = False )
 except TypeError :
  O0oo00 = IIiI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 s_shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False ,
 defaultt = OoOo0OO0o ,
 enableMultiple = False )
 if 'Palantir_Backup_' in O0oo00 :
  import zipfile
  iIiIi = zipfile . ZipFile ( O0oo00 , 'r' )
  iIiIi . extractall ( OOOO00Ooo )
  iIiIi . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Restaurada : %s' % O0oo00 , xbmcgui . NOTIFICATION_INFO , 7000 )
 elif O0oo00 . endswith ( '.zip' ) :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'El fichero debe ser Palantir_Backup_... Invalido %s' % O0oo00 , xbmcgui . NOTIFICATION_WARNING , 7000 )
  if 88 - 88: IIII % oOO / O00O
  if 43 - 43: I1 % IiII1IiI
  if 29 - 29: IIII . oOOoo00oo0oO0 . oOOoo00oo0oO0 % oo + oo00000o0 - oo00000o0
  if 74 - 74: Ii / oooOoO
  if 40 - 40: ii1I1ii1IiIi1 / OOO - OOoOoO0o0o0OO % IIII
def iIiIiii ( id , type , nombre , url , caratula , poster , remove ) :
 if 90 - 90: ii1I1ii1IiIi1 % IiII1IiI . II . oOOoo00oo0oO0 - iiIIi1i1Iii % IiII1IiI
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
  if 27 - 27: ii1I1ii1IiIi1 + IIoooO0ooO0oo - oo
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if not remove :
  oOO00OoO0oo = ( 'Descarga en Palantir' ,
 'XBMC.RunPlugin(%s?action=addDownload&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 OOo0oOOOO0 , id , base64 . urlsafe_b64encode ( nombre ) , url , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  oOO00OoO0oo = ( 'Borrar descarga' ,
 'XBMC.RunPlugin(%s?action=rmDownload&id=%s&nombre=%s&caratula=%s&poster=%s&type=%s)' % (
 OOo0oOOOO0 , id , base64 . urlsafe_b64encode ( nombre ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
  if 95 - 95: IIII % oooOoO
 return oOO00OoO0oo
 if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
def oo0o00ooO ( options ) :
 if 85 - 85: oooOoO * II % o00oO0oo0O0O0
 try :
  Ii1II1I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  Ii1oO0o0oOOoOOOo = json . loads ( ooo0oOOo0O0Oo0 ( ii1I1Iii ) )
  if 61 - 61: OOO * O00O * O00O % ii1I1ii1IiIi1
  if 86 - 86: OOoOoO0o0o0OO . IiII1IiI - OOO - IIII
  if 75 - 75: o00oO0oo0O0O0 + IIoooO0ooO0oo
  if 19 - 19: IIII - O00O . i1iI1
  if 45 - 45: OOO / II + II + OoO0ooooo % IIoooO0ooO0oo + O00O
  os . remove ( '%s%s' % ( Ii1II1I , base64 . urlsafe_b64decode ( options [ 'nombre' ] ) ) )
  Ii1oO0o0oOOoOOOo . pop ( options [ 'nombre' ] , None )
  i1iIiIiIi = open ( ii1I1Iii , "w" )
  i1iIiIiIi . write ( json . dumps ( Ii1oO0o0oOOoOOOo ) )
  if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
  i1iIiIiIi . close ( )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 except :
  traceback . print_exc ( file = sys . stdout )
  xbmc . log ( '[addon.Palantir] Error Ops %s' % options )
  return
  if 58 - 58: II % oo00000o0 * OOoOoO0o0o0OO * oooOoO . I1i1iiIIi
def ooOoOOOO ( download_file ) :
 o0O000oOO = __settings__ . getSetting ( 'MaxNumDownloads' )
 IIIIOo0OoOO = __settings__ . getSetting ( 'MaxSizeDownloads' )
 if 22 - 22: Ii % oooOoO + IIII + OOoOoO0o0o0OO
 if 73 - 73: oOO . i1iI1
 if 99 - 99: I1 * oo00000o0 + IIoooO0ooO0oo + Ii . oOO
 if 69 - 69: iiIIi1i1Iii - II
 if 33 - 33: Ii + oOOoo00oo0oO0 % i1iI1 + IiII1IiI
 o00O000O = set ( )
 Ii1II1I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 for IiI11IiI1iI11 in download_file . keys ( ) :
  o00O000O . add ( IiI11IiI1iI11 )
  if 23 - 23: OoO0ooooo - iiIIi1i1Iii
 OoOoOO = set ( )
 if 48 - 48: oooOoO * oo00000o0
 OOo0OOoo00 = iI11I1IiiI1ii ( confirmationMessage = False )
 if 86 - 86: I1i1iiIIi % o00oO0oo0O0O0 * II * i1iI1
 i11ii = 0
 if OOo0OOoo00 :
  for o0oOOOO0Oo in os . listdir ( Ii1II1I ) :
   OoOoOO . add ( os . path . splitext ( o0oOOOO0Oo ) [ 0 ] )
   if 64 - 64: IIII . OOoOoO0o0o0OO % oo / oooOoO % i1iI1
  if int ( o0O000oOO ) <= len ( o00O000O & set ( OoOoOO ) ) and int ( o0O000oOO ) < 11 :
   OO0o00ooOo0o0 = 'Maximo numero de descargas superado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   return False
   if 96 - 96: Ii + IIII
  i11ii = sum ( os . path . getsize ( '%s%s' % ( Ii1II1I , f ) ) for f in os . listdir ( Ii1II1I ) if os . path . isfile ( '%s%s' % ( Ii1II1I , f ) ) and os . path . splitext ( f ) [ 0 ] in o00O000O )
  if 24 - 24: oOOoo00oo0oO0 % ii1I1ii1IiIi1 * oo00000o0 % II / oo / oOOoo00oo0oO0
  if 57 - 57: IIII . II
  if IIIIOo0OoOO != 6 and IIIIOo0OoOO != 'Ilimitado' and IIIIOo0OoOO != 'Unlimited' :
   if IIIIOo0OoOO == '0' :
    IIIIOo0OoOO = 1024
   elif IIIIOo0OoOO == '1' :
    IIIIOo0OoOO = 1024 * 2
   elif IIIIOo0OoOO == '2' :
    IIIIOo0OoOO = 1024 * 3
   elif IIIIOo0OoOO == '3' :
    IIIIOo0OoOO = 1024 * 5
   elif IIIIOo0OoOO == '4' :
    IIIIOo0OoOO = 1024 * 10
   elif IIIIOo0OoOO == '5' :
    IIIIOo0OoOO = 1024 * 20
   else :
    IIIIOo0OoOO = IIIIOo0OoOO . replace ( 'GB' , '' )
   if int ( i11ii ) / 1048576 > int ( IIIIOo0OoOO ) :
    OO0o00ooOo0o0 = 'Tamaño maximo para descargas superado'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
    OOo0OOoo00 = False
    if 53 - 53: IIII + oo * i1iI1 . oOO - IiII1IiI . IIII
  return OOo0OOoo00
 else :
  return False
  if 80 - 80: Ii - OoO0ooooo % oo00000o0 / oo * oo00000o0 + o00oO0oo0O0O0
  if 35 - 35: ii1I1ii1IiIi1 % IIII
def o0oOOoO ( options ) :
 Ii1oO0o0oOOoOOOo = { }
 if 21 - 21: Ii
 if os . path . exists ( ii1I1Iii ) :
  Ii1oO0o0oOOoOOOo = json . loads ( ooo0oOOo0O0Oo0 ( ii1I1Iii ) )
 if ooOoOOOO ( Ii1oO0o0oOOoOOOo ) :
  iII = IIIii1Ii ( unicode ( base64 . urlsafe_b64decode ( options [ 'nombre' ] ) . decode ( 'utf-8' ) ) )
  OOo00ooo0 = base64 . urlsafe_b64encode ( iII )
  if 47 - 47: O00O
  iiiiii11 , oOOOoo = os . path . splitext ( iII )
  if 57 - 57: oooOoO
  if iII . endswith ( oOOOoo ) :
   iII = iiiiii11
   if 30 - 30: i1iI1 + oooOoO * O00O / oOO % oo00000o0
  Ii1oO0o0oOOoOOOo [ iII ] = (
 options [ 'id' ] , iII , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OOO00Oo00OooO = open ( ii1I1Iii , "w" )
  if 7 - 7: IIII
  OOO00Oo00OooO . write ( json . dumps ( Ii1oO0o0oOOoOOOo ) )
  OOO00Oo00OooO . close ( )
  return True
 else :
  return False
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 90 - 90: I1 - IiII1IiI . I1i1iiIIi + O00O * ii1I1ii1IiIi1 . O00O
 if 63 - 63: OOO / oo - i1iI1 - IIII - oOOoo00oo0oO0
def IiIiI ( ) :
 oOo0 = [ ]
 Ii1II1I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 if os . path . exists ( ii1I1Iii ) == False :
  OOO00Oo00OooO = open ( ii1I1Iii , "w" )
  OOO00Oo00OooO . write ( json . dumps ( { } ) )
  if 31 - 31: OOO
  OOO00Oo00OooO . close ( )
 else :
  if 11 - 11: oo00000o0
  items = json . loads ( ooo0oOOo0O0Oo0 ( ii1I1Iii ) )
  if 10 - 10: oooOoO - OOO / oo / OoO0ooooo
  for oOi1IiII1 , IiII1I in items . copy ( ) . iteritems ( ) :
   ooOOOOo = IiII1I [ 0 ] . encode ( 'utf-8' )
   ooOoOo000O0 = IiII1I [ 1 ] . encode ( 'utf-8' , 'ignore' )
   if 6 - 6: IiII1IiI . IIoooO0ooO0oo / OOO + oOOoo00oo0oO0 % oooOoO . OOO
   if 41 - 41: iiIIi1i1Iii / oo00000o0
   if 27 - 27: Ii % Ii - oOO - oOOoo00oo0oO0
   if 28 - 28: o00oO0oo0O0O0 * oOO * oOOoo00oo0oO0
   II1II1111 = os . path . splitext ( Ii1II1I ) [ 0 ] + re . sub ( r'(?<!\[)\]' , '[]]' , re . sub ( r'\[' , '[[]' , ooOoOo000O0 ) ) + '.*'
   IIIIo0o0O0oooOO = glob . glob ( II1II1111 )
   if 84 - 84: IIoooO0ooO0oo - I1i1iiIIi / oOO - II / ii1I1ii1IiIi1
   if len ( IIIIo0o0O0oooOO ) > 0 :
    IIIIo0o0O0oooOO = IIIIo0o0O0oooOO [ 0 ]
    ooOoOo000O0 = ooOoOo000O0 + ( os . path . splitext ( IIIIo0o0O0oooOO ) [ 1 ] ) . encode ( 'utf-8' , 'ignore' )
    if 91 - 91: II - i1iI1 % IiII1IiI % oo / IIII - I1
   else :
    IIIIo0o0O0oooOO = ''
    if 51 - 51: oOO . OoO0ooooo
   if not os . path . exists ( IIIIo0o0O0oooOO ) :
    if 62 - 62: O00O
    items . pop ( ooOoOo000O0 , None )
   else :
    Oo0000OO0O = IiII1I [ 2 ] . encode ( 'utf-8' )
    i1Ii11i = IiII1I [ 3 ] . encode ( 'utf-8' )
    ooOO0Oo0oO = IiII1I [ 4 ] . encode ( 'utf-8' )
    IiIiIIi1 = base64 . urlsafe_b64decode ( i1Ii11i )
    OO = base64 . urlsafe_b64decode ( Oo0000OO0O )
    if 59 - 59: IIoooO0ooO0oo - OOoOoO0o0o0OO * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 * IIII * IIoooO0ooO0oo
    if 14 - 14: II . oOOoo00oo0oO0 * OoO0ooooo * IIII
    IIIii1I1ii = False
    if len ( ooOOOOo . split ( '-' ) ) == 3 :
     IIIii1I1ii = True
     if 42 - 42: oOO . OOO / IiII1IiI % IIoooO0ooO0oo
     if 7 - 7: oo / Ii - OOO
    Iiii1II1IIi = OoOO0Ooo ( nombre = ooOoOo000O0 , caratula = OO , poster = IiIiIIi1 , isPlayable = IIIii1I1ii )
    Iiii1II1IIi . addContextMenuItems ( [ iIiIiii ( id = str ( IiII1I [ 0 ] ) , nombre = ooOoOo000O0 , url = base64 . urlsafe_b64encode ( '%s%s' % ( Ii1II1I , ooOoOo000O0 ) ) ,
 caratula = Oo0000OO0O , poster = i1Ii11i , remove = True , type = ooOO0Oo0oO ) ] )
    IIiii11ii1iIII1I = '{0}?{1}=playLocal&path={2}&tit={3}' . format ( OOo0oOOOO0 , I1i1ii1 , base64 . urlsafe_b64encode ( IIIIo0o0O0oooOO ) , base64 . urlsafe_b64encode ( ooOoOo000O0 ) )
    oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , not IIIii1I1ii ) )
    if 22 - 22: iiIIi1i1Iii
  i1iIiIiIi = open ( ii1I1Iii , "w" )
  if 87 - 87: OOO
  i1iIiIiIi . write ( json . dumps ( items ) )
  i1iIiIiIi . close ( )
 try :
  if 91 - 91: o00oO0oo0O0O0 + iiIIi1i1Iii - Ii - ii1I1ii1IiIi1 * oo00000o0 * oOOoo00oo0oO0
  OOO0oo ( OO0oo )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 92 - 92: oo00000o0 . I1
 if 98 - 98: IiII1IiI
def oO0Oo000O ( options ) :
 if 61 - 61: oo / oo00000o0
 if o0oOOoO ( options ) :
  ithil . IiiIi1i11i ( options [ 'url' ] , options [ 'nombre' ] , Oo , options [ 'id' ] , options [ 'type' ] , 'download' )
  if 48 - 48: oo / oOOoo00oo0oO0 . oo * oOO + o00oO0oo0O0O0
def O0000o00o00O ( ) :
 if 85 - 85: I1 + oo % IiII1IiI + oooOoO + IIII . o00oO0oo0O0O0
 OO0O0OO0 = xbmcaddon . Addon ( id = "script.module.simple.downloader" )
 II11iI11IiiiI = OO0O0OO0 . getAddonInfo ( 'profile' )
 for OO0oO0 in os . listdir ( xbmc . translatePath ( II11iI11IiiiI ) ) :
  try :
   if 16 - 16: Ii * OOO * IIII % O00O * OOO - iiIIi1i1Iii
   os . remove ( '%s%s' % ( xbmc . translatePath ( II11iI11IiiiI ) , OO0oO0 ) )
  except :
   if 68 - 68: ii1I1ii1IiIi1 . ii1I1ii1IiIi1 / oo . o00oO0oo0O0O0
   OO0o00ooOo0o0 = 'No se puede borrar el fichero %s ' % OO0oO0
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 93 - 93: Ii / ii1I1ii1IiIi1 - oo * O00O
   if 5 - 5: IiII1IiI * OoO0ooooo * oo00000o0 + Ii % iiIIi1i1Iii . oo00000o0
   if 11 - 11: OOO - IIII . II / II / Ii
   if 52 - 52: OoO0ooooo / OOO . OoO0ooooo / iiIIi1i1Iii + oOOoo00oo0oO0
 oOOoO0oOoO0 = '%s%s' % ( xbmc . translatePath ( 'special://temp' ) , 'commoncache.db' )
 try :
  OOo000Oo = sqlite3 . connect ( oOOoO0oOoO0 )
  o0O = OOo000Oo . cursor ( )
  o0O . execute ( "delete from Downloader" )
  OOo000Oo . commit ( )
  OOo000Oo . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Limpieza realizada correctamente' , xbmcgui . NOTIFICATION_INFO , 5000 )
 except :
  traceback . print_exc ( file = sys . stdout )
  OO0o00ooOo0o0 = 'No se puede borrar bd commoncache'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 77 - 77: iiIIi1i1Iii * oooOoO . II
def iI11I1IiiI1ii ( confirmationMessage = True ) :
 o0O000oOO = __settings__ . getSetting ( 'MaxNumDownloads' )
 IIIIOo0OoOO = __settings__ . getSetting ( 'MaxSizeDownloads' )
 OoOo0OO0o = __settings__ . getSetting ( 'DownloadPath' )
 if 75 - 75: II - oOOoo00oo0oO0 - iiIIi1i1Iii . o00oO0oo0O0O0 - II - ii1I1ii1IiIi1
 if not OoOo0OO0o :
  OoOo0OO0o = 'downloads'
 Ii1II1I = xbmc . translatePath ( OoOo0OO0o )
 if 11 - 11: oo00000o0 - ii1I1ii1IiIi1 * oooOoO % Ii
 if Ii1II1I . lower ( ) . startswith ( "smb://" ) :
  OO0o00ooOo0o0 = 'La ruta Samba no está soportada, seleccione otra ruta para las descargas'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 if not os . path . exists ( Ii1II1I ) :
  try :
   os . mkdir ( Ii1II1I )
  except :
   OO0o00ooOo0o0 = 'No existe la ruta %s y no se puede crear.\nRevisa la configuracion y selecciona una ruta con permisos de escritura' % OoOo0OO0o
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 29 - 29: iiIIi1i1Iii + OoO0ooooo - oooOoO / oo00000o0 + Ii - oOO
 try :
  OOO00Oo00OooO = open ( '%s/bolson.test' % Ii1II1I , "w" )
  OOO00Oo00OooO . write ( 'Test' )
  OOO00Oo00OooO . close ( )
  try :
   os . remove ( '%s/bolson.test' % Ii1II1I )
   if confirmationMessage :
    OO0o00ooOo0o0 = 'Ruta de descargas correcta'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
   return True
  except :
   OO0o00ooOo0o0 = 'No se puede borrar en la carpeta seleccionada'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 except :
  OO0o00ooOo0o0 = 'No se puede guardar en la carpeta seleccionada'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , OO0o00ooOo0o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return False
 if 29 - 29: oOO
 if 22 - 22: oooOoO * OOO / OoO0ooooo / I1 / IiII1IiI
 if 45 - 45: oOOoo00oo0oO0 + O00O
 if 83 - 83: OoO0ooooo % OoO0ooooo - oOOoo00oo0oO0 - OoO0ooooo + OoO0ooooo + i1iI1
def I11111IiiIII1 ( id , type , nombre , url , caratula , poster , fav = oO0oOOOOOo0 , text = '' , favLiteral = '' , refresh = None ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in fav :
  oOO00OoO0oo = ( 'Añadir a favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=addfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s&text=%s)' % (
 OOo0oOOOO0 , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type , text ) )
 else :
  oOO00OoO0oo = ( 'Eliminar de favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=rmfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s&text=%s)' % (
 OOo0oOOOO0 , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type , text ) )
 return oOO00OoO0oo
 if 38 - 38: Ii + ii1I1ii1IiIi1 + I1i1iiIIi * OoO0ooooo . II + II
 if 57 - 57: O00O + OOoOoO0o0o0OO - O00O . Ii - IIII
def iiII1i ( options , favoritos = oOo0oo0 ) :
 Ii1oO0o0oOOoOOOo = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( favoritos ) ) )
 Ii1oO0o0oOOoOOOo . pop ( options [ 'id' ] , None )
 i1iIiIiIi = open ( favoritos , "w" )
 i1iIiIiIi . write ( base64 . urlsafe_b64encode ( json . dumps ( Ii1oO0o0oOOoOOOo ) ) )
 i1iIiIiIi . close ( )
 if 83 - 83: oooOoO . iiIIi1i1Iii - oo00000o0
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 2 - 2: oo00000o0
  if 96 - 96: iiIIi1i1Iii . oo00000o0 % I1i1iiIIi . iiIIi1i1Iii
def II1iiIiiII ( favoritos , fav , favLiteral , text ) :
 oOo0 = [ ]
 if os . path . exists ( favoritos ) == False :
  OOO00Oo00OooO = open ( favoritos , "w" )
  OOO00Oo00OooO . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  OOO00Oo00OooO . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( favoritos ) ) )
  for oOi1IiII1 in sorted ( items . items ( ) , key = lambda O0oOO0OoO0O : O0oOO0OoO0O [ 1 ] [ 1 ] ) :
   IiII1I = oOi1IiII1 [ 1 ]
   ooOOOOo = IiII1I [ 0 ] . encode ( 'utf-8' )
   ooOoOo000O0 = IiII1I [ 1 ] . encode ( 'utf-8' )
   try :
    if 77 - 77: I1i1iiIIi % IIoooO0ooO0oo * oo00000o0 * IIII - II - OOoOoO0o0o0OO
    ooOoOo000O0 = IiII1I [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   IIiii11ii1iIII1I = IiII1I [ 2 ] . encode ( 'utf-8' )
   Oo0000OO0O = IiII1I [ 3 ] . encode ( 'utf-8' )
   i1Ii11i = IiII1I [ 4 ] . encode ( 'utf-8' )
   ooOO0Oo0oO = IiII1I [ 5 ] . encode ( 'utf-8' )
   IiIiIIi1 = base64 . urlsafe_b64decode ( i1Ii11i )
   OO = base64 . urlsafe_b64decode ( Oo0000OO0O )
   ooOoOo000O0 = base64 . urlsafe_b64decode ( ooOoOo000O0 )
   IIIii1I1ii = False
   if len ( ooOOOOo . split ( '-' ) ) == 3 :
    IIIii1I1ii = True
   Iiii1II1IIi = OoOO0Ooo ( nombre = ooOoOo000O0 , caratula = OO , poster = IiIiIIi1 , isPlayable = IIIii1I1ii )
   Iiii1II1IIi . addContextMenuItems ( [ I11111IiiIII1 ( id = str ( IiII1I [ 0 ] ) , nombre = ooOoOo000O0 , url = IIiii11ii1iIII1I ,
 caratula = Oo0000OO0O , poster = i1Ii11i , refresh = True , type = ooOO0Oo0oO , fav = fav , text = text , favLiteral = favLiteral ) ] )
   if 96 - 96: o00oO0oo0O0O0 / oOO * oooOoO - Ii
   oOo0 . append ( ( base64 . urlsafe_b64decode ( IIiii11ii1iIII1I ) , Iiii1II1IIi , not IIIii1I1ii ) )
 try :
  if 6 - 6: o00oO0oo0O0O0 * IiII1IiI + oo % II * oOOoo00oo0oO0 % i1iI1
  OOO0oo ( ooO00Oo )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 35 - 35: oOO / II
 if 83 - 83: I1
def IiIiI1ii11 ( options , favoritos = oOo0oo0 ) :
 oO0o = { }
 if os . path . exists ( favoritos ) == False :
  if 21 - 21: IIoooO0ooO0oo . O00O + OOoOoO0o0o0OO
  oO0o [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OOO00Oo00OooO = open ( favoritos , "w" )
  OOO00Oo00OooO . write ( base64 . urlsafe_b64encode ( json . dumps ( oO0o ) ) )
  OOO00Oo00OooO . close ( )
 else :
  Ii1oO0o0oOOoOOOo = json . loads ( base64 . urlsafe_b64decode ( ooo0oOOo0O0Oo0 ( favoritos ) ) )
  Ii1oO0o0oOOoOOOo [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  i1iIiIiIi = open ( favoritos , "w" )
  i1iIiIiIi . write ( base64 . urlsafe_b64encode ( json . dumps ( Ii1oO0o0oOOoOOOo ) ) )
  i1iIiIiIi . close ( )
 if 'text' in options :
  i111Ii1ii11 = options [ 'text' ]
 else :
  i111Ii1ii11 = ''
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 i1i1II11I = xbmcgui . Dialog ( )
 i1i1II11I . notification ( 'Palantir' ,
 'Favorito añadido a [COLOR gold]%s[/COLOR] Palantir' % ( i111Ii1ii11 ) ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 57 - 57: OoO0ooooo . oo + iiIIi1i1Iii * oo00000o0 % oo00000o0 / Ii
def IiiIi11iIII1 ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 45 - 45: Ii
 if 71 - 71: II / oo00000o0
 if 94 - 94: o00oO0oo0O0O0 * o00oO0oo0O0O0 / IIII + ii1I1ii1IiIi1 + I1 * OOO
def OO0ooOO00000ooO ( dimension ) :
 if dimension :
  iIiII11iIiI = dimension . split ( "x" )
  if len ( iIiII11iIiI ) == 2 :
   OoO = int ( iIiII11iIiI [ 0 ] )
   iII1 = int ( iIiII11iIiI [ 1 ] )
   if OoO == 0 or iII1 == 0 :
    return ""
   elif OoO <= 720 and iII1 <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif OoO <= 768 and iII1 <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif OoO <= 960 and iII1 <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif OoO <= 1280 and iII1 <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 41 - 41: IIII % O00O % II / OOO % OoO0ooooo / Ii
 if 20 - 20: IIII + oOOoo00oo0oO0 / I1
def Ooo00O0OOoO ( ) :
 IiIIIi1I = ithil . iiIii1i ( Oo , 'kbg' )
 ooI1ii = ithil . II1ii11111Iii ( Oo )
 if ooI1ii :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario (%s) validado' % IiIIIi1I [ 0 ] . encode ( 'utf-8' ) , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario (%s) y contraseña no válidas' % IiIIIi1I [ 0 ] . encode ( 'utf-8' ) , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 84 - 84: OOoOoO0o0o0OO . I1i1iiIIi / iiIIi1i1Iii
  if 18 - 18: Ii / o00oO0oo0O0O0 % OOoOoO0o0o0OO
  if 45 - 45: IIII % i1iI1 + OOO - oOO
def o0o00O0 ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 Ii1oO0o0oOOoOOOo = [ ]
 if temp_sinop == None :
  Ii1oO0o0oOOoOOOo . append ( serie_sinop )
 else :
  Ii1oO0o0oOOoOOOo . append ( temp_sinop )
 if temp_caratula == None :
  Ii1oO0o0oOOoOOOo . append ( serie_caratula )
 else :
  Ii1oO0o0oOOoOOOo . append ( temp_caratula )
 if temp_poster == None :
  Ii1oO0o0oOOoOOOo . append ( serie_poster )
 else :
  Ii1oO0o0oOOoOOOo . append ( temp_poster )
 return Ii1oO0o0oOOoOOOo
 if 39 - 39: IiII1IiI . IiII1IiI
 if 77 - 77: i1iI1 % oo00000o0
 if 46 - 46: oOOoo00oo0oO0 + iiIIi1i1Iii
def I1II1iII1I1 ( operator , value , params ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 iI1iIiiIii1 = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  iI1iIiiIii1 = int ( params [ 'c_page' ] )
  o0O . execute ( "Select " + "," . join (
 o0OoO0o ) + oo0OOO0O + " from series where lower(category) " + operator + " ? AND " + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + " AND active > 0 AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( i1iIii ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  o0O . execute ( "Select " + "," . join (
 o0OoO0o ) + oo0OOO0O + " from series where active > 0 and lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 i1iIii ) , ( value , ) )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 params [ 'c_page' ] = iI1iIiiIii1
 iIIiIii1i1 ( Ii1I11iIi1I1I , False , True , False , params )
 if 83 - 83: o00oO0oo0O0O0 % OOoOoO0o0o0OO / Ii . O00O
 if 15 - 15: i1iI1 + Ii . OOoOoO0o0o0OO * IIII . IIoooO0ooO0oo
def i1I ( fields , table ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute ( "Select " + "," . join ( fields ) + " from " + table + " where active > 0 order by updated desc limit 200" )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 iIIiIii1i1 ( Ii1I11iIi1I1I , True , True , True )
 if 37 - 37: O00O
 if 90 - 90: o00oO0oo0O0O0 - o00oO0oo0O0O0 * oooOoO % IIoooO0ooO0oo
def oO0OOo00O ( order ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute ( "Select " + "," . join ( o0OoO0o ) + " from series where active > 0 order by " + order + " desc, nombre asc limit 200" )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 iIIiIii1i1 ( Ii1I11iIi1I1I , True , True , False )
 if 63 - 63: I1
def ooiiI1iI1 ( order , params ) :
 if 80 - 80: o00oO0oo0O0O0 / oOOoo00oo0oO0 + I1 % OOoOoO0o0o0OO
 if 33 - 33: O00O * oo / iiIIi1i1Iii / OOO * iiIIi1i1Iii
 if 3 - 3: o00oO0oo0O0O0 * OOoOoO0o0o0OO
 if 5 - 5: IiII1IiI % OOoOoO0o0o0OO
 if 88 - 88: Ii % O00O . iiIIi1i1Iii * O00O
 if 27 - 27: oo
 Ii1I11iIi1I1I = IiI11I ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ ] , [ ] , order , params )
 OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = params )
 if 69 - 69: IIoooO0ooO0oo
def iIIi ( serie_attr , type ) :
 oOo000OO0Oo = iIi1ii1I1iII1 ( )
 if oOo000OO0Oo :
  OOo000Oo = sqlite3 . connect ( Oo )
  o0O = OOo000Oo . cursor ( )
  if 85 - 85: I1 % II - oo
  oOo000OO0Oo = '%' + oOo000OO0Oo + '%'
  try :
   o0O . execute ( "Select " + "," . join (
 serie_attr ) + oo0OOO0O + " from " + type + " where active > 0 and nombre like ? order by alfa asc, nombre asc" ,
 ( unicode ( oOo000OO0Oo . decode ( 'utf-8' ) ) , ) )
  except :
   o0O . execute ( "Select " + "," . join (
 serie_attr ) + oo0OOO0O + " from " + type + " where active > 0 and nombre like ? order by alfa asc, nombre asc" ,
 ( IIIii1Ii ( unicode ( oOo000OO0Oo . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  Ii1I11iIi1I1I = o0O . fetchall ( )
  if len ( Ii1I11iIi1I1I ) == 0 :
   o0O . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where active > 0 and nombre like ? order by nombre asc" ,
 ( IIIii1Ii ( unicode ( oOo000OO0Oo . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   Ii1I11iIi1I1I = o0O . fetchall ( )
  OOo000Oo . close ( )
  if type == ii1i1i1 :
   iIIiIii1i1 ( Ii1I11iIi1I1I , True , True , False )
  else :
   OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
   if 26 - 26: IiII1IiI + OOoOoO0o0o0OO - IIII + IiII1IiI + IiII1IiI
   if 12 - 12: oOO + O00O
   if 62 - 62: ii1I1ii1IiIi1
def II1Ii1 ( audio = None , tab = 'series' ) :
 if not audio :
  OOo000Oo = sqlite3 . connect ( Oo )
  o0O = OOo000Oo . cursor ( )
  o0O . execute ( "Select audio,count(audio) from " + tab + " where audio!='Castellano' and active > 0 group by audio order by audio" )
  Ii1I11iIi1I1I = o0O . fetchall ( )
  OOo000Oo . close ( )
  oOo0 = [ ]
  for iI1IiiII1iI in Ii1I11iIi1I1I :
   audio = iI1IiiII1iI [ 0 ]
   ooOoOoOoOooo = iI1IiiII1iI [ 1 ]
   i11iIIi = '[COLOR %s]%s[/COLOR] (%s)' % ( I11I1ii , audio , ooOoOoOoOooo )
   Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = '' )
   if tab == 'series' :
    IIiii11ii1iIII1I = '{0}?action=seriesByLang&lang={1}' . format ( OOo0oOOOO0 , audio . encode ( 'utf-8' ) )
   else :
    IIiii11ii1iIII1I = '{0}?action=pelisByLang&lang={1}' . format ( OOo0oOOOO0 , audio . encode ( 'utf-8' ) )
   IIi11I11i = True
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
  try :
   if 76 - 76: IIII - oooOoO / oooOoO / IIII
   OOO0oo ( IIIIiiIIiII1i )
  except :
   pass
  xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
  xbmcplugin . endOfDirectory ( i111IIiiI1I )
 else :
  if tab == 'series' :
   Ii1I11iIi1I1I = IiI11I ( "series" , o0OoO0o , [ "audio" ] , [ audio . decode ( 'utf-8' ) ] , [ "nombre" ] , params = { 'sql_cond' : ' active > 0' } )
   iIIiIii1i1 ( Ii1I11iIi1I1I , True , None , False )
  else :
   if 9 - 9: i1iI1
   Ii1I11iIi1I1I = IiI11I ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ "audio" ] , [ audio . decode ( 'utf-8' ) ] , [ "nombre" ] , { "sql_cond" : "  active > 0 " } )
   OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
   if 87 - 87: I1 - Ii + o00oO0oo0O0O0 * II * OOO % i1iI1
   if 42 - 42: oOO * i1iI1 % o00oO0oo0O0O0 - oooOoO % oooOoO
def IIIii ( letra = None , type = '' ) :
 OOOO0OOoO = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 O0oo = '!0-9..'
 I1111i111i1 = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  iI1iiI11II = o0OoO0o
 else :
  iI1iiI11II = i1Ii1II
 if not letra :
  IIIi11I = "" . join ( [ "When " + i1i + " Then '" + O0oOO0OoO0O + "'" for O0oOO0OoO0O , i1i in OOOO0OOoO . iteritems ( ) ] )
  OOo000Oo = sqlite3 . connect ( Oo )
  o0O = OOo000Oo . cursor ( )
  o0O . execute (
 "select alfa, count (alfa) from (select CASE " + IIIi11I + " WHEN " + I1111i111i1 + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s where active > 0) group by alfa order by alfa" )
  Ii1I11iIi1I1I = o0O . fetchall ( )
  OOo000Oo . close ( )
  oOo0 = [ ]
  for iI1IiiII1iI in Ii1I11iIi1I1I :
   letra = iI1IiiII1iI [ 0 ]
   ooOoOoOoOooo = iI1IiiII1iI [ 1 ]
   i11iIIi = '[COLOR %s]%s[/COLOR] (%s)' % ( I11I1ii , letra , ooOoOoOoOooo )
   Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = '' )
   IIiii11ii1iIII1I = '{0}?action={1}sByAZ&letra={2}' . format ( OOo0oOOOO0 , type , letra )
   IIi11I11i = True
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
  try :
   if 5 - 5: O00O % IiII1IiI / oooOoO + ii1I1ii1IiIi1
   OOO0oo ( IIIIiiIIiII1i )
  except :
   pass
  xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
  xbmcplugin . endOfDirectory ( i111IIiiI1I )
 else :
  OOo000Oo = sqlite3 . connect ( Oo )
  o0O = OOo000Oo . cursor ( )
  if letra in OOOO0OOoO :
   OOOO0OOoO [ letra ] = OOOO0OOoO [ letra ] + ' OR'
  elif letra == O0oo :
   OOOO0OOoO [ letra ] = "AND" . join ( [ " NOT ( " + i1i + ") " for O0oOO0OoO0O , i1i in OOOO0OOoO . iteritems ( ) ] ) + " AND NOT (" + I1111i111i1 + ") OR"
  else :
   OOOO0OOoO [ letra ] = ''
  if type == 'peli' :
   iI1iiI11II = iI1I1
   IIiIII1 = ' active > 0 and'
   if 18 - 18: I1i1iiIIi * OOO - oo
  o0O . execute (
 "select " + "," . join ( iI1iiI11II ) + " from " + type + "s where active > 0 AND ( " + OOOO0OOoO [ letra ] + " upper(substr(nombre, 1, 1)) == ?) order by nombre" ,
 ( letra , ) )
  Ii1I11iIi1I1I = o0O . fetchall ( )
  OOo000Oo . close ( )
  if type == 'peli' :
   OoIii1II1i11 ( Ii1I11iIi1I1I , type = 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
  else :
   iIIiIii1i1 ( Ii1I11iIi1I1I , True , True , False )
   if 94 - 94: I1 / iiIIi1i1Iii * o00oO0oo0O0O0 - OoO0ooooo % I1i1iiIIi / oOO
   if 17 - 17: O00O / OoO0ooooo
def iiii1IIIIi1II ( option ) :
 II1O00Ooo = [ ]
 if "Series" == option :
  II1O00Ooo . append ( { 'title' : 'Series Favoritas' , I1i1ii1 : 'listfavs' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series' , I1i1ii1 : ii1i1i1 , 'ico' : ii1i1i1 , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Series Anime' , I1i1ii1 : 'series_anime' , 'ico' : 'series_anime' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Series Dibujos' , I1i1ii1 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series Retro' , I1i1ii1 : 'series_retro' , 'ico' : 'series_retro' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Telenovelas' , I1i1ii1 : 'telenovelas' , 'ico' : 'telenovelas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series A-Z' , I1i1ii1 : 'seriesByAZ' , 'ico' : ii1i1i1 , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series Otros Idiomas' , I1i1ii1 : 'seriesByLang' , 'ico' : 'series_otros_idiomas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series Recientes' , I1i1ii1 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Más Vistas' , I1i1ii1 : 'series_mas_vistas' , 'ico' : 'series_mas_vistas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Mas Vistas Último Mes' , I1i1ii1 : 'series_mas_vistas_mes' , 'ico' : 'series_mas_vistas_mes' , 'fan' : 'fanart_series' } )
  II1O00Ooo . append ( { 'title' : 'Buscar Serie' , I1i1ii1 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 elif "Pelis" == option :
  II1O00Ooo . append ( { 'title' : 'Pelis Favoritas' , I1i1ii1 : 'listfavp' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Pelis A-Z' , I1i1ii1 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Pelis (Genero)' , I1i1ii1 : 'list_generos' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Pelis (Año)' , I1i1ii1 : 'anyo' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Pelis Otros Idiomas' , I1i1ii1 : 'pelisByLang' , 'ico' : 'pelis_otros_idiomas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Sagas' , I1i1ii1 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Top Pelis (Año)' , I1i1ii1 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Pelis Recientes' , I1i1ii1 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Pelis Recientes (Año)' , I1i1ii1 : 'ultimas_pelis_anyo' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Más Vistas' , I1i1ii1 : 'pelis_mas_vistas' , 'ico' : 'pelis_mas_vistas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Más Vistas Último Mes' , I1i1ii1 : 'pelis_mas_vistas_mes' , 'ico' : 'pelis_mas_vistas_mes' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Buscar Peli' , I1i1ii1 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 elif "Dibujos" == option :
  II1O00Ooo . append ( { 'title' : 'Dibujos Favoritos' , I1i1ii1 : 'listfavd' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Series Dibujos' , I1i1ii1 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Pelis Dibujos' , I1i1ii1 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Especial Disney' , I1i1ii1 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( 'Especial Disney' ) , 'ico' : 'https://i.imgur.com/D1Mcw4Q.png' ,
 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Top Pelis Dibujos' , I1i1ii1 : 'top_peli_inf' , 'ico' : 'top_pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Pelis Dibujos Recientes' , I1i1ii1 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Más Vistas' , I1i1ii1 : 'pelis_dibujos_mas_vistas' , 'ico' : 'pelis_dibus_mas_vistas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Más Vistas Último Mes' , I1i1ii1 : 'pelis_dibujos_mas_vistas_mes' , 'ico' : 'pelis_dibus_mas_vistas_ultimo_mes' ,
 'fan' : 'fanart_palantir' } )
 elif "Herramientas" == option :
  II1O00Ooo . append ( { 'title' : 'Limpiar Temporales' , I1i1ii1 : 'clean' , 'ico' : 'limpiar' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Crear Copia Favoritos' , I1i1ii1 : 'createCopy' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Restaurar Favoritos' , I1i1ii1 : 'restoreCopy' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
 else :
  II1O00Ooo . append ( { 'title' : 'Favoritos' , I1i1ii1 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  OOOoO00o0OOO0 ( II1O00Ooo )
  II1O00Ooo . append ( { 'title' : 'Menu Series' , I1i1ii1 : 'series_menu' , 'ico' : 'menu_serie' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Menu Pelis' , I1i1ii1 : 'pelis_menu' , 'ico' : 'menu_peli' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Menu Dibujos' , I1i1ii1 : 'dibujos_menu' , 'ico' : 'menu_dibujos' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Series Recientes' , I1i1ii1 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append (
 { 'title' : 'Pelis Recientes' , I1i1ii1 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Pelis Dibujos Recientes' , I1i1ii1 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Buscar Peli' , I1i1ii1 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Buscar Serie' , I1i1ii1 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  if __settings__ . getSetting ( 'activeDownload' ) :
   II1O00Ooo . append ( { 'title' : 'Descargas' , I1i1ii1 : 'downloads' , 'ico' : 'descargas' , 'fan' : 'fanart_palantir' } )
  II1O00Ooo . append ( { 'title' : 'Herramientas' , I1i1ii1 : 'herramientas_menu' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
 return II1O00Ooo
 if 55 - 55: IIoooO0ooO0oo % Ii % IiII1IiI
 if 78 - 78: IIII * I1 + i1iI1 / IIoooO0ooO0oo
 if 9 - 9: O00O * oo - oooOoO
def oO00Oo00o ( ) :
 II1O00Ooo = [ ]
 II1O00Ooo . append ( { 'title' : 'Series' , I1i1ii1 : ii1i1i1 , 'ico' : ii1i1i1 , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Series A-Z' , I1i1ii1 : 'seriesByAZ' , 'ico' : ii1i1i1 , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Series Infantiles' , I1i1ii1 : 'series_dibujos' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Series Retro' , I1i1ii1 : 'series_retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Favoritos' , I1i1ii1 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis A-Z' , I1i1ii1 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis (Genero)' , I1i1ii1 : 'list_generos' , 'ico' : 'pelis_genero' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis (Año)' , I1i1ii1 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis Dibujos' , I1i1ii1 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Top Pelis (Año)' , I1i1ii1 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Top Pelis Dibujos' , I1i1ii1 : 'top_peli_inf' , 'ico' : 'top_dibujos' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis Dibujos Recientes' , I1i1ii1 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Pelis Recientes' , I1i1ii1 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Series Recientes' , I1i1ii1 : 'ultimas_series' , 'ico' : 'series_recientes' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Sagas' , I1i1ii1 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Buscar Peli' , I1i1ii1 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 II1O00Ooo . append ( { 'title' : 'Buscar Serie' , I1i1ii1 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 if 62 - 62: OoO0ooooo % OOO * i1iI1 % OOO * OoO0ooooo + Ii
 if 58 - 58: oOO / IIII + oOO . oOOoo00oo0oO0
 return II1O00Ooo
 if 65 - 65: oo00000o0 % IIoooO0ooO0oo % Ii
 if 31 - 31: OOO * OoO0ooooo
def oOoooOooOOo0Oo ( function_menu ) :
 if 73 - 73: Ii / OoO0ooooo . oo . IIII . OoO0ooooo
 II1O00Ooo = function_menu
 oOo0 = [ ]
 for Oo00o in II1O00Ooo :
  if Oo00o [ 'ico' ] . lower ( ) . startswith ( 'http' ) :
   Oo0000OO0O = Oo00o [ 'ico' ]
  else :
   Oo0000OO0O = '%s/%s.png' % ( oooOoo0o0o , Oo00o [ 'ico' ] )
  Iiii1II1IIi = OoOO0Ooo ( nombre = '[COLOR %s][B]%s[/B][/COLOR]' % ( I11I1ii , Oo00o [ 'title' ] ) , caratula = Oo0000OO0O ,
 poster = '%s/%s.jpg' % ( oooOoo0o0o , Oo00o [ 'fan' ] ) )
  IIiii11ii1iIII1I = '{0}?{1}={2}' . format ( OOo0oOOOO0 , I1i1ii1 , Oo00o [ I1i1ii1 ] )
  IIi11I11i = True
  oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  if 91 - 91: OOO + oo00000o0
  OOO0oo ( OoOoOo )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 37 - 37: OoO0ooooo + oOOoo00oo0oO0 + IiII1IiI
def OOO0oo ( view ) :
 if view != 'none' :
  if 9 - 9: I1 / I1 . IiII1IiI
  if 34 - 34: i1iI1 + IiII1IiI
  if 80 - 80: II . IIoooO0ooO0oo * i1iI1 . OoO0ooooo . IiII1IiI
  if 83 - 83: OOO * I1 / oo * OOO
  if 79 - 79: I1 % OoO0ooooo
  if 56 - 56: oooOoO % I1i1iiIIi . oOO * II - OOoOoO0o0o0OO
  if 6 - 6: O00O / I1 * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 / I1
  if 22 - 22: IIII - II - I1 - oooOoO + I1 % oOOoo00oo0oO0
  if 82 - 82: II - oo00000o0 / oo / II . OOoOoO0o0o0OO
  xbmc . executebuiltin ( "Container.SetViewMode(%s)" % str ( view ) )
  if 75 - 75: O00O
def OOOoO00o0OOO0 ( categories ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute ( "select especial from version" )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 if Ii1I11iIi1I1I [ 0 ] is not None and Ii1I11iIi1I1I [ 0 ] [ 0 ] is not None :
  oOOO0o = Ii1I11iIi1I1I [ 0 ] [ 0 ] . split ( '#' )
  IiII1I = 0
  for O0oOO0OoO0O in xrange ( 0 , len ( oOOO0o ) / 2 ) :
   if 30 - 30: oOOoo00oo0oO0 / oOO
   if 20 - 20: oooOoO * II % II
   categories . append ( { 'title' : oOOO0o [ O0oOO0OoO0O * 2 ] , I1i1ii1 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( oOOO0o [ O0oOO0OoO0O * 2 ] ) , 'ico' : oOOO0o [ ( O0oOO0OoO0O * 2 ) + 1 ] , 'fan' : 'fanart_palantir' } )
   if 89 - 89: II
   if 19 - 19: Ii * iiIIi1i1Iii % ii1I1ii1IiIi1 + iiIIi1i1Iii
   if 30 - 30: oo00000o0 + OOO * O00O / oo00000o0
   if 58 - 58: oo
def OoIii1II1i11 ( rows = [ ] , type = ii1i1i1 , carat = None , poste = None , info = { } ) :
 try :
  if type == ii1i1i1 :
   xbmcplugin . setContent ( i111IIiiI1I , "episodes" )
   OOO0oo ( IIi )
  else :
   xbmcplugin . setContent ( i111IIiiI1I , "movies" )
   OOO0oo ( III11i11 )
 except :
  pass
  if 53 - 53: iiIIi1i1Iii * oo00000o0
 O0ooO = { }
 if 11 - 11: oo / ii1I1ii1IiIi1
 if 73 - 73: IIII / oooOoO + oo
 if 78 - 78: IIII % oOO - I1
 if 82 - 82: OOO % IIII / oooOoO
 if 17 - 17: ii1I1ii1IiIi1
 if 93 - 93: IiII1IiI . oOOoo00oo0oO0
 if 62 - 62: IIoooO0ooO0oo * IIoooO0ooO0oo
 if 38 - 38: i1iI1
 if 68 - 68: OOO . OOO / OOO
 OOo0oo = { }
 oOo0 = [ ]
 if len ( rows ) > 0 :
  for iI1IiiII1iI in rows :
   if 68 - 68: o00oO0oo0O0O0 / o00oO0oo0O0O0 . oo00000o0 . II % OOO
   oOO00OoO0oo = [ ]
   iIi1IiIii = iI1IiiII1iI [ 0 ]
   OoOo000 = iI1IiiII1iI [ 1 ]
   O0o = iI1IiiII1iI [ 2 ]
   O0oo000O = iI1IiiII1iI [ 6 ]
   if iI1IiiII1iI [ 7 ] :
    i11III1 = iI1IiiII1iI [ 7 ]
   else :
    i11III1 = None
   I1111i11 = iI1IiiII1iI [ 8 ]
   I1I1i11III11I = iI1IiiII1iI [ 9 ]
   O0ooooo0 = iI1IiiII1iI [ 10 ]
   Oo0000OO0O = iI1IiiII1iI [ 11 ]
   i1Ii11i = iI1IiiII1iI [ 12 ]
   if I1111i11 :
    oOOOOo = I1111i11
    if type == 'series' :
     I1111i11 = '[COLOR %s] %s[/COLOR]' % ( ii1i1ii1I , I1111i11 )
    else :
     I1111i11 = '[COLOR %s] %s[/COLOR]' % ( o0o0000O0 , I1111i11 )
   else :
    oOOOOo = str ( OoOo000 ) + 'x' + O0o
    I1111i11 = str ( OoOo000 ) + 'x' + O0o
   if iI1IiiII1iI [ 3 ] :
    O0ooOOoOooo = iI1IiiII1iI [ 3 ] . split ( '#' )
    for iiiiIiI1 in O0ooOOoOooo :
     if iiiiIiI1 == 'S' :
      iiiiIiI1 = 'HD'
     I1111i11 = I1111i11 + '[COLOR %s] (%s) [/COLOR]' % ( Iiooo , str ( iiiiIiI1 ) )
   if info and 'puntos' in info and iI1IiiII1iI [ 14 ] :
    I1111i11 = I1111i11 + ' [%s] ' % str ( iI1IiiII1iI [ 14 ] )
   if info and 'anno' in info and I1I1i11III11I :
    I1111i11 = I1111i11 + ' (%s) ' % str ( I1I1i11III11I )
   if type == 'pelis' and OoOo000 != 'Castellano' :
    I1111i11 = I1111i11 + ' [COLOR %s](%s)[/COLOR] ' % ( O000Ooo0o0OOo , str ( OoOo000 ) )
   if info and 'date' in info :
    I1111i11 = I1111i11 + ' (%s) ' % str ( iI1IiiII1iI [ 13 ] )
   if not Oo0000OO0O :
    Oo0000OO0O = carat
   if not i1Ii11i :
    i1Ii11i = poste
   Iiii1II1IIi = OoOO0Ooo ( nombre = I1111i11 , caratula = Oo0000OO0O ,
 poster = i1Ii11i , video = { 'title' : I1111i11 , 'year' : I1I1i11III11I , 'plot' : O0ooooo0 } , isPlayable = True )
   if 79 - 79: iiIIi1i1Iii
   if isinstance ( oOOOOo , unicode ) :
    oOOOOo = oOOOOo . encode ( 'utf-8' )
   IIiii11ii1iIII1I = '{0}?{1}=play&id={2}&lin={3}&tit={4}&type={5}' . format ( OOo0oOOOO0 , I1i1ii1 , iIi1IiIii , O0oo000O ,
 base64 . urlsafe_b64encode (
 unicode ( oOOOOo , IIiIiiI1ii11 ) . encode (
 IIiIiiI1ii11 ) ) , type )
   try :
    oo0 , o0OO00OO0 = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight from files, streamdetails where streamdetails.idFile = files.idFile and iStreamType=0 and idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=play&id=%s%s"' % (
 str ( iI1IiiII1iI [ 0 ] ) , '%' ) )
    if 70 - 70: IIoooO0ooO0oo . II . oooOoO - iiIIi1i1Iii
    for IiIIIIIiii in o0OO00OO0 :
     O0ooO [ IiIIIIIiii [ 2 ] ] = IiIIIIIiii
   except :
    pass
    if 42 - 42: oOO . IiII1IiI
   if IIiii11ii1iIII1I in O0ooO :
    if O0ooO [ IIiii11ii1iIII1I ] [ 3 ] > 0 :
     oOO00OoO0oo . append ( O0oOooOoOo0 ( O0ooO [ IIiii11ii1iIII1I ] [ 0 ] , O0ooO [ IIiii11ii1iIII1I ] [ 1 ] , O0ooO [ IIiii11ii1iIII1I ] [ 2 ] , False ) )
    else :
     oOO00OoO0oo . append ( O0oOooOoOo0 ( O0ooO [ IIiii11ii1iIII1I ] [ 0 ] , O0ooO [ IIiii11ii1iIII1I ] [ 1 ] , O0ooO [ IIiii11ii1iIII1I ] [ 2 ] , True ) )
    if O0ooO [ IIiii11ii1iIII1I ] [ 4 ] :
     if not str ( iIi1IiIii ) + '-' + str ( OoOo000 ) + '-' + O0o in OOo0oo :
      OOo0oo [ str ( iIi1IiIii ) + '-' + str ( OoOo000 ) + '-' + O0o ] = str ( O0ooO [ IIiii11ii1iIII1I ] [ 4 ] )
   else :
    oOO00OoO0oo . append ( O0oOooOoOo0 ( 0 , oO , IIiii11ii1iIII1I , True ) )
    if 37 - 37: I1i1iiIIi
   oOO00OoO0oo . append (
 I11111IiiIII1 ( id = '%s-%s-%s' % ( str ( iIi1IiIii ) , str ( OoOo000 ) , O0o ) , type = type , nombre = I1111i11 ,
 url = IIiii11ii1iIII1I ,
 caratula = Oo0000OO0O , poster = i1Ii11i , fav = oO0oOOOOOo0 , favLiteral = '' ) )
   if type == 'series' :
    oOO00OoO0oo . append (
 I11111IiiIII1 ( id = '%s-%s-%s' % ( str ( iIi1IiIii ) , str ( OoOo000 ) , O0o ) , type = type , nombre = I1111i11 , url = IIiii11ii1iIII1I ,
 caratula = Oo0000OO0O , poster = i1Ii11i , fav = Ii1 , text = 'Series' , favLiteral = 's' ) )
    if 31 - 31: I1
    if 4 - 4: II / oOOoo00oo0oO0 - O00O + IIII
    if 73 - 73: oOO * ii1I1ii1IiIi1
    if 25 - 25: IiII1IiI - II . oo / oo00000o0
    if 19 - 19: OOoOoO0o0o0OO * oo . oo
    if 72 - 72: IiII1IiI
   if len ( iI1IiiII1iI ) > 15 and 'Dibujos' in iI1IiiII1iI [ 15 ] :
    if 2 - 2: OOO
    oOO00OoO0oo . append (
 I11111IiiIII1 ( id = '%s-%s-%s' % ( str ( iIi1IiIii ) , str ( OoOo000 ) , O0o ) , type = type , nombre = I1111i11 ,
 url = IIiii11ii1iIII1I ,
 caratula = Oo0000OO0O , poster = i1Ii11i , fav = IIiI11 , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    oOO00OoO0oo . append (
 I11111IiiIII1 ( id = '%s-%s-%s' % ( str ( iIi1IiIii ) , str ( OoOo000 ) , O0o ) , type = type , nombre = I1111i11 ,
 url = IIiii11ii1iIII1I ,
 caratula = Oo0000OO0O , poster = i1Ii11i , fav = iii1iIII1111I , text = 'Pelis' , favLiteral = 'p' ) )
    if 21 - 21: I1 + OoO0ooooo / I1i1iiIIi + oOOoo00oo0oO0 + o00oO0oo0O0O0 % oo00000o0
    if 59 - 59: IIoooO0ooO0oo % I1 / II - OOoOoO0o0o0OO + ii1I1ii1IiIi1
   if iI1IiiII1iI [ 16 ] == 2 and __settings__ . getSetting ( 'activeDownload' ) :
    oOO00OoO0oo . append (
 iIiIiii ( id = '%s-%s-%s' % ( str ( iIi1IiIii ) , str ( OoOo000 ) , O0o ) , type = type , nombre = oOOOOo ,
 url = O0oo000O ,
 caratula = Oo0000OO0O , poster = i1Ii11i , remove = False ) )
   Iiii1II1IIi . addContextMenuItems ( oOO00OoO0oo )
   if 83 - 83: I1i1iiIIi
   if 48 - 48: iiIIi1i1Iii
   if 34 - 34: iiIIi1i1Iii . oo % oo00000o0
   if 9 - 9: OoO0ooooo % OoO0ooooo + oOO + oOO
   if 36 - 36: iiIIi1i1Iii * i1iI1
   IIi11I11i = False
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
  try :
   if len ( OOo0oo ) > 0 :
    for oOi1IiII1 , oOOOo in OOo0oo . iteritems ( ) :
     ithil . updateQuality ( Oo , oOi1IiII1 , oOOOo , type )
  except :
   pass
   if 56 - 56: O00O * oo % iiIIi1i1Iii + oo00000o0 - IIII + OoO0ooooo
 else :
  if 42 - 42: II - oooOoO % oo
  oOo0 . append ( ( '{0}' . format ( OOo0oOOOO0 ) , OoOO0Ooo ( nombre = 'No hay elementos' , caratula = '' ) , True ) )
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 62 - 62: I1
 if 85 - 85: Ii . iiIIi1i1Iii . OOoOoO0o0o0OO
 if 50 - 50: oo * I1 + O00O % OOO + I1i1iiIIi
def iIIiIii1i1 ( rows , category = None , lang = None , date = None , params = { } ) :
 oOo0 = [ ]
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "tvshows" )
  OOO0oo ( O0ooo0o0OOO )
 except :
  pass
  if 22 - 22: oOO * OOoOoO0o0o0OO
  if 2 - 2: OoO0ooooo + iiIIi1i1Iii . Ii - oOO
 for iI1IiiII1iI in rows :
  Oo0ooOo0oo = [ ]
  ooOOOOo = iI1IiiII1iI [ 0 ]
  o00oOo0000o0O = iI1IiiII1iI [ 1 ]
  IIiII1iiIi1ii = iI1IiiII1iI [ 2 ]
  Ooo0 = ''
  O0OO000000oO0 = ''
  I1i1 = ''
  if 1 - 1: o00oO0oo0O0O0 + IIoooO0ooO0oo - OOO
  if category and iI1IiiII1iI [ 10 ] != 'General' and iI1IiiII1iI [ 10 ] != 'Pelicula' :
   O0OO000000oO0 = '[COLOR %s](%s) [/COLOR]' % ( OoO0oooOoO0 , iI1IiiII1iI [ 10 ] . replace ( '#' , ', ' ) )
  if lang and iI1IiiII1iI [ 9 ] != 'Castellano' :
   Ooo0 = '[COLOR %s](%s) [/COLOR]' % ( O000Ooo0o0OOo , iI1IiiII1iI [ 9 ] )
  if date :
   I1i1 = '[COLOR %s](%s)[/COLOR]' % ( OO0O0 , str ( iI1IiiII1iI [ 11 ] ) )
  if IIiII1iiIi1ii and iI1IiiII1iI [ 8 ] == 'N' :
   IIiiIi = ithil . OOo0oo ( IIiII1iiIi1ii )
   if IIiiIi == 'yt' :
    OO0OOoOo0O0O = ithil . I11I1IiiI1IIi ( IIiII1iiIi1ii )
    for O0oOO0OoO0O in xrange ( 0 , len ( OO0OOoOo0O0O ) ) :
     if len ( OO0OOoOo0O0O ) <= 1 :
      i1i111iiiiIII = ''
     else :
      i1i111iiiiIII = " (" + str ( O0oOO0OoO0O + 1 ) + ")"
     i11iIIi = '[COLOR %s]%s [/COLOR] %s %s %s' % ( I11I1ii , o00oOo0000o0O + i1i111iiiiIII , Ooo0 , O0OO000000oO0 , I1i1 )
     Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = iI1IiiII1iI [ 6 ] ,
 poster = iI1IiiII1iI [ 7 ] , video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : iI1IiiII1iI [ 5 ] } )
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = OO0OOoOo0O0O [ O0oOO0OoO0O ] ,
 caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] ) )
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] ,
 caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] , fav = Ii1 ,
 text = 'Series' , favLiteral = 's' ) )
     if 'Dibujos' in iI1IiiII1iI [ 10 ] :
      Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] ,
 caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] , fav = IIiI11 ,
 text = 'Dibujos' , favLiteral = 'd' ) )
     Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
     oOo0 . append ( ( OO0OOoOo0O0O [ O0oOO0OoO0O ] , Iiii1II1IIi , True ) )
   else :
    i11iIIi = '[COLOR %s]%s [/COLOR] %s %s %s' % ( I11I1ii , o00oOo0000o0O , Ooo0 , O0OO000000oO0 , I1i1 )
    Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = iI1IiiII1iI [ 6 ] ,
 poster = iI1IiiII1iI [ 7 ] , video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : iI1IiiII1iI [ 5 ] } )
    IIiii11ii1iIII1I = '{0}?{1}=view_serie&serie_id={2}' . format ( OOo0oOOOO0 , I1i1ii1 , ooOOOOo )
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] ) )
    if 44 - 44: oo * oo % IIII * II * I1i1iiIIi . IIII
    if 'Dibujos' in iI1IiiII1iI [ 10 ] :
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] ,
 poster = iI1IiiII1iI [ 7 ] , fav = IIiI11 , text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     Oo0ooOo0oo . append (
 I11111IiiIII1 ( id = '%s-v' % str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] ,
 poster = iI1IiiII1iI [ 7 ] , fav = Ii1 , text = 'Series' , favLiteral = 's' ) )
    Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
    oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , True ) )
  else :
   i11iIIi = '[COLOR %s]%s [/COLOR] %s %s %s' % ( I11I1ii , o00oOo0000o0O , Ooo0 , O0OO000000oO0 , I1i1 )
   Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = iI1IiiII1iI [ 6 ] ,
 poster = iI1IiiII1iI [ 7 ] , video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : iI1IiiII1iI [ 5 ] } )
   IIiii11ii1iIII1I = '{0}?{1}=serie&serie_id={2}' . format ( OOo0oOOOO0 , I1i1ii1 , ooOOOOo )
   Oo0ooOo0oo . append ( I11111IiiIII1 ( id = str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] ) )
   if 'Dibujos' in iI1IiiII1iI [ 10 ] :
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] ,
 fav = IIiI11 , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    Oo0ooOo0oo . append (
 I11111IiiIII1 ( id = str ( ooOOOOo ) , type = 'series' , nombre = i11iIIi , url = IIiii11ii1iIII1I , caratula = iI1IiiII1iI [ 6 ] , poster = iI1IiiII1iI [ 7 ] ,
 fav = Ii1 , text = 'Series' , favLiteral = 's' ) )
   Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , True ) )
   if 73 - 73: iiIIi1i1Iii + OOoOoO0o0o0OO % IIoooO0ooO0oo * IIoooO0ooO0oo / II + OoO0ooooo
 if len ( rows ) >= i1iIii :
  if 'c_page' in params and 'action' in params :
   try :
    o00oOo0000o0O = o00oOo0000o0O . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   I1II = int ( params [ 'c_page' ] )
   I1II = I1II + 1
   Iiii1II1IIi = OoOO0Ooo ( nombre = 'Página Siguiente (%s) >' % str ( I1II ) )
   IIiii11ii1iIII1I = '{0}?{1}={2}&c_page={3}&alfa={4}&page={5}' . format ( OOo0oOOOO0 , I1i1ii1 , params [ 'action' ] , str ( I1II ) ,
 base64 . urlsafe_b64encode (
 "alfa >= '" + rows [ len ( rows ) - 1 ] [ 12 ] + "'" ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + o00oOo0000o0O + "'" ) )
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , True ) )
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 99 - 99: IIII / i1iI1 + oooOoO - II
 if 69 - 69: IIoooO0ooO0oo . oOOoo00oo0oO0 + II . oo + ii1I1ii1IiIi1 % IiII1IiI
 if 65 - 65: oo00000o0 * I1i1iiIIi * oOO * i1iI1 % Ii
def iI11 ( serie_id ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, series.quality, series_temp.quality, series.category , series_temp.active FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 oOo0 = [ ]
 Oo0ooOo0oo = [ ]
 oOOOO = False
 if len ( Ii1I11iIi1I1I ) > 0 :
  Oo00o = Ii1I11iIi1I1I [ 0 ] [ 16 ]
  if 45 - 45: OOO / ii1I1ii1IiIi1 * I1 . OoO0ooooo * oOO
  if Ii1I11iIi1I1I [ 0 ] [ 13 ] :
   IIiiIi = ithil . OOo0oo ( Ii1I11iIi1I1I [ 0 ] [ 13 ] )
   if IIiiIi == 'yt' :
    OO0OOoOo0O0O = ithil . I11I1IiiI1IIi ( Ii1I11iIi1I1I [ 0 ] [ 13 ] )
    for O0oOO0OoO0O in xrange ( 0 , len ( OO0OOoOo0O0O ) ) :
     if len ( OO0OOoOo0O0O ) <= 1 :
      i1i111iiiiIII = ''
     else :
      i1i111iiiiIII = " (" + str ( O0oOO0OoO0O + 1 ) + ")"
     i11iIIi = '[COLOR %s]Lista de Capítulos %s [/COLOR]' % ( I11I1ii , i1i111iiiiIII )
     Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] ,
 poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1I11iIi1I1I [ 0 ] [ 3 ] , 'year' : Ii1I11iIi1I1I [ 0 ] [ 4 ] , 'plot' : Ii1I11iIi1I1I [ 0 ] [ 5 ] } )
     if 33 - 33: oOO
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] ,
 poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ) )
     if Oo00o == 'Dibujos' :
      Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] , fav = IIiI11 ,
 text = 'Dibujos' , favLiteral = 'd' ,
 poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ) )
     else :
      Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] , fav = Ii1 ,
 text = 'Series' , favLiteral = 's' ,
 poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ) )
     Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
     oOo0 . append ( ( OO0OOoOo0O0O [ O0oOO0OoO0O ] , Iiii1II1IIi , True ) )
   else :
    i11iIIi = '[COLOR %s]Lista de Capítulos [/COLOR]' % I11I1ii
    Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] ,
 poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1I11iIi1I1I [ 0 ] [ 3 ] , 'year' : Ii1I11iIi1I1I [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    IIiii11ii1iIII1I = '{0}?{1}=view_serie&serie_id={2}' . format ( OOo0oOOOO0 , I1i1ii1 , serie_id )
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 , nombre = i11iIIi , url = IIiii11ii1iIII1I ,
 caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] , poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] ) )
    if Oo00o == 'Dibujos' :
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = IIiii11ii1iIII1I ,
 caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] , poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] , fav = IIiI11 ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s-v' % str ( serie_id ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = IIiii11ii1iIII1I ,
 caratula = Ii1I11iIi1I1I [ 0 ] [ 6 ] , poster = Ii1I11iIi1I1I [ 0 ] [ 7 ] , fav = Ii1 ,
 text = 'Series' , favLiteral = 's' ) )
    Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
    if 50 - 50: oOO * oOOoo00oo0oO0 * IIII * oOOoo00oo0oO0 * IiII1IiI
    if 24 - 24: Ii . oooOoO + I1 * O00O * IIoooO0ooO0oo / I1
    if 79 - 79: oo00000o0 - oOO + OOoOoO0o0o0OO - oooOoO . oo * oo
    oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , True ) )
 for iI1IiiII1iI in Ii1I11iIi1I1I :
  Oo00o = iI1IiiII1iI [ 16 ]
  Oo0ooOo0oo = [ ]
  oOOOO = False
  ooOOOOo = iI1IiiII1iI [ 0 ]
  o00Oo0OoOOo = iI1IiiII1iI [ 1 ]
  if 79 - 79: IIII / II % OoO0ooooo - OoO0ooooo
  if iI1IiiII1iI [ 12 ] :
   iiIOOOo0o0o00oO = iI1IiiII1iI [ 12 ]
  else :
   iiIOOOo0o0o00oO = '%s %s' % ( 'Temporada' , o00Oo0OoOOo )
  ooOo0OOoo = o0o00O0 ( iI1IiiII1iI [ 5 ] , iI1IiiII1iI [ 6 ] , iI1IiiII1iI [ 7 ] , iI1IiiII1iI [ 8 ] , iI1IiiII1iI [ 9 ] , iI1IiiII1iI [ 10 ] )
  if iI1IiiII1iI [ 2 ] and iI1IiiII1iI [ 17 ] > 0 :
   IIi11I11i = True
   oOOOO = True
   IIiiIi = ithil . OOo0oo ( iI1IiiII1iI [ 2 ] )
   if IIiiIi == 'yt' :
    OO0OOoOo0O0O = ithil . I11I1IiiI1IIi ( iI1IiiII1iI [ 2 ] )
    for O0oOO0OoO0O in xrange ( 0 , len ( OO0OOoOo0O0O ) ) :
     if len ( OO0OOoOo0O0O ) <= 1 :
      i1i111iiiiIII = ''
     else :
      i1i111iiiiIII = " (" + str ( O0oOO0OoO0O + 1 ) + ")"
     i11iIIi = '[COLOR %s]%s[/COLOR]' % ( I11I1ii , iiIOOOo0o0o00oO + i1i111iiiiIII )
     Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = ooOo0OOoo [ 1 ] ,
 poster = ooOo0OOoo [ 2 ] ,
 video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : ooOo0OOoo [ 0 ] } )
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] ) )
     if Oo00o == 'Dibujos' :
      Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] ,
 fav = IIiI11 , text = 'Dibujos' , favLiteral = 'd' ) )
     else :
      Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = OO0OOoOo0O0O [ O0oOO0OoO0O ] , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] ,
 fav = Ii1 , text = 'Series' , favLiteral = 's' ) )
     Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
     oOo0 . append ( ( OO0OOoOo0O0O [ O0oOO0OoO0O ] , Iiii1II1IIi , True ) )
   else :
    i11iIIi = '[COLOR %s]%s[/COLOR]' % ( I11I1ii , iiIOOOo0o0o00oO )
    Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = ooOo0OOoo [ 1 ] ,
 poster = ooOo0OOoo [ 2 ] ,
 video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : ooOo0OOoo [ 0 ] } )
    IIiii11ii1iIII1I = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( OOo0oOOOO0 , I1i1ii1 , ooOOOOo , o00Oo0OoOOo )
    if 12 - 12: oo00000o0 * o00oO0oo0O0O0 . oo00000o0 % OOoOoO0o0o0OO % I1i1iiIIi + OoO0ooooo
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = IIiii11ii1iIII1I , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] ) )
    if Oo00o == 'Dibujos' :
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = IIiii11ii1iIII1I , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] , fav = IIiI11 ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s-v' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 ,
 nombre = i11iIIi ,
 url = IIiii11ii1iIII1I , caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] , fav = Ii1 ,
 text = 'Series' , favLiteral = 's' ) )
    Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
    if 13 - 13: I1 * oOO
    if 13 - 13: OOO + I1i1iiIIi * oo + oo / i1iI1 / o00oO0oo0O0O0
    if 65 - 65: iiIIi1i1Iii / OoO0ooooo
    oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
  if iI1IiiII1iI [ 11 ] == 'Y' :
   i11iIIi = '[COLOR %s]%s [/COLOR]' % ( I11I1ii , iiIOOOo0o0o00oO )
   if iI1IiiII1iI [ 2 ] :
    i11iIIi = '%s [COLOR %s](Alternativo)[/COLOR]' % ( i11iIIi , O0000O )
   Iiii1II1IIi = OoOO0Ooo ( nombre = i11iIIi , caratula = ooOo0OOoo [ 1 ] ,
 poster = ooOo0OOoo [ 2 ] ,
 video = { 'title' : iI1IiiII1iI [ 3 ] , 'year' : iI1IiiII1iI [ 4 ] , 'plot' : ooOo0OOoo [ 0 ] } )
   IIiii11ii1iIII1I = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( OOo0oOOOO0 , I1i1ii1 , ooOOOOo , o00Oo0OoOOo ,
 ooOo0OOoo [ 1 ] , ooOo0OOoo [ 2 ] )
   if 42 - 42: OoO0ooooo + I1
   Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 , nombre = i11iIIi , url = IIiii11ii1iIII1I ,
 caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] ) )
   if Oo00o == 'Dibujos' :
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = IIiii11ii1iIII1I ,
 caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] , fav = IIiI11 , text = 'Dibujos' ,
 favLiteral = 'd' ) )
   else :
    Oo0ooOo0oo . append ( I11111IiiIII1 ( id = '%s%s' % ( str ( ooOOOOo ) , str ( o00Oo0OoOOo ) ) , type = ii1i1i1 , nombre = i11iIIi ,
 url = IIiii11ii1iIII1I ,
 caratula = ooOo0OOoo [ 1 ] , poster = ooOo0OOoo [ 2 ] , fav = Ii1 , text = 'Series' ,
 favLiteral = 's' ) )
   Iiii1II1IIi . addContextMenuItems ( Oo0ooOo0oo )
   if 70 - 70: OOoOoO0o0o0OO - o00oO0oo0O0O0 / i1iI1 + OoO0ooooo . o00oO0oo0O0O0
   if 83 - 83: I1 / OoO0ooooo / OOoOoO0o0o0OO / oo + OOoOoO0o0o0OO . I1i1iiIIi
   if 55 - 55: II . I1i1iiIIi
   if 52 - 52: oooOoO . I1 - i1iI1 . IiII1IiI
   IIi11I11i = True
   oOOOO = True
   oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "tvshows" )
  OOO0oo ( O0ooo0o0OOO )
 except :
  pass
 if oOOOO :
  xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
  xbmcplugin . endOfDirectory ( i111IIiiI1I )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( oOo0OOooOOOoo , serie_id ) )
  if 45 - 45: O00O + oOOoo00oo0oO0 + oo / I1i1iiIIi * o00oO0oo0O0O0
  if 40 - 40: oooOoO
  if 47 - 47: OOoOoO0o0o0OO * ii1I1ii1IiIi1 + iiIIi1i1Iii + Ii / I1i1iiIIi
def oo0oo ( serie_id , temp_id , caratula , poster ) :
 Ii1I11iIi1I1I = IiI11I ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "updated" , "'Test'" , "'Test'" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] , params = { 'sql_cond' : ' active > 0' } )
 OoIii1II1i11 ( Ii1I11iIi1I1I , ii1i1i1 , caratula , poster )
 if 9 - 9: iiIIi1i1Iii / iiIIi1i1Iii . oooOoO . O00O . o00oO0oo0O0O0
 if 88 - 88: OOO
 if 16 - 16: Ii / i1iI1 / I1i1iiIIi
def Oooo0OoO0 ( serie_id , temp_id ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, series_temp.quality, series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series.category, series.active FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 if 82 - 82: oo00000o0 - IIoooO0ooO0oo * IiII1IiI . iiIIi1i1Iii % oo
 ooOo0OOoo = o0o00O0 ( Ii1I11iIi1I1I [ 0 ] [ 10 ] , Ii1I11iIi1I1I [ 0 ] [ 11 ] , Ii1I11iIi1I1I [ 0 ] [ 12 ] , Ii1I11iIi1I1I [ 0 ] [ 13 ] , Ii1I11iIi1I1I [ 0 ] [ 14 ] , Ii1I11iIi1I1I [ 0 ] [ 15 ] )
 O0O00o0ooooo0 = ithil . i11Ii ( Ii1I11iIi1I1I [ 0 ] [ 6 ] , Oo , serie_id , temp_id )
 I1I1iIIiII1 = [ None ] * len ( O0O00o0ooooo0 )
 if 76 - 76: II . oooOoO - oooOoO % oOOoo00oo0oO0
 for O0oOO0OoO0O in xrange ( 0 , len ( O0O00o0ooooo0 ) ) :
  if 19 - 19: ii1I1ii1IiIi1 - OoO0ooooo
  I1I1iIIiII1 [ O0oOO0OoO0O ] = list ( Ii1I11iIi1I1I [ 0 ] [ : len ( Ii1I11iIi1I1I [ 0 ] ) ] )
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 10 ] = ooOo0OOoo [ 0 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 11 ] = ooOo0OOoo [ 1 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 12 ] = ooOo0OOoo [ 2 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 6 ] = O0O00o0ooooo0 [ O0oOO0OoO0O ] [ 1 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 8 ] = O0O00o0ooooo0 [ O0oOO0OoO0O ] [ 0 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 10 ] = ''
  if 60 - 60: I1 * oooOoO + IIoooO0ooO0oo
  if 46 - 46: i1iI1 + OOoOoO0o0o0OO * oOO
  if 95 - 95: Ii . O00O . OoO0ooooo . i1iI1 + OoO0ooooo
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 15 ] = Ii1I11iIi1I1I [ 0 ] [ 16 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 16 ] = Ii1I11iIi1I1I [ 0 ] [ 17 ]
  if 43 - 43: I1
  if 52 - 52: Ii - OOO + ii1I1ii1IiIi1 / O00O * i1iI1
 OoIii1II1i11 ( I1I1iIIiII1 , ii1i1i1 )
 if 14 - 14: IIII % O00O % i1iI1 . IiII1IiI / OOO
 if 71 - 71: ii1I1ii1IiIi1 * I1i1iiIIi * oOOoo00oo0oO0 / IIII
 if 82 - 82: IIoooO0ooO0oo + i1iI1 . IIII . o00oO0oo0O0O0 / OOoOoO0o0o0OO . iiIIi1i1Iii
def oO0oo0o0o ( serie_id ) :
 Ii1I11iIi1I1I = IiI11I ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "updated" , "''" , "category" , "active"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 51 - 51: ii1I1ii1IiIi1 % O00O
 if 94 - 94: ii1I1ii1IiIi1 + oOOoo00oo0oO0 * IIII / OOO - I1i1iiIIi
 O0O00o0ooooo0 = ithil . i11Ii ( Ii1I11iIi1I1I [ 0 ] [ 6 ] , Oo , serie_id )
 I1I1iIIiII1 = [ None ] * len ( O0O00o0ooooo0 )
 for O0oOO0OoO0O in xrange ( 0 , len ( O0O00o0ooooo0 ) ) :
  I1I1iIIiII1 [ O0oOO0OoO0O ] = list ( Ii1I11iIi1I1I [ 0 ] [ : ] )
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 6 ] = O0O00o0ooooo0 [ O0oOO0OoO0O ] [ 1 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 8 ] = O0O00o0ooooo0 [ O0oOO0OoO0O ] [ 0 ]
  I1I1iIIiII1 [ O0oOO0OoO0O ] [ 10 ] = ''
 OoIii1II1i11 ( I1I1iIIiII1 , ii1i1i1 )
 if 69 - 69: IIII % IIII - O00O + oOO . ii1I1ii1IiIi1 - oo00000o0
 if 47 - 47: IiII1IiI % ii1I1ii1IiIi1 + i1iI1
 if 94 - 94: oOO . I1i1iiIIi / oOO * II - IiII1IiI % oo
def oooO0 ( ) :
 oOo0 = [ ]
 for O0oOO0OoO0O in range ( 0 , 10 ) :
  iI1I = datetime . datetime . now ( ) . year - O0oOO0OoO0O
  i11iIIi = '[COLOR %s]%s[/COLOR]' % ( I11I1ii , iI1I )
  Iiii1II1IIi = xbmcgui . ListItem ( label = i11iIIi , iconImage = '' )
  IIiii11ii1iIII1I = '{0}?action={1}&anno={2}' . format ( OOo0oOOOO0 , "ultimas_pelis_anyo_detail" , iI1I )
  IIi11I11i = True
  oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "files" )
  OOO0oo ( IIIIiiIIiII1i )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 87 - 87: IIII . o00oO0oo0O0O0 - IIII - oOOoo00oo0oO0
def iI1I1Ii ( action , condition = '' ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 o0O . execute ( "Select anno,count(peli_id) from pelis %s group by anno order by anno desc" % condition )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 oOo0 = [ ]
 for iI1IiiII1iI in Ii1I11iIi1I1I :
  iI1I = iI1IiiII1iI [ 0 ]
  ooOoOoOoOooo = iI1IiiII1iI [ 1 ]
  i11iIIi = '[COLOR %s]%s[/COLOR] (%s)' % ( I11I1ii , iI1I , ooOoOoOoOooo )
  Iiii1II1IIi = xbmcgui . ListItem ( label = i11iIIi , iconImage = '' )
  IIiii11ii1iIII1I = '{0}?action={1}&anno={2}' . format ( OOo0oOOOO0 , action , iI1I )
  IIi11I11i = True
  oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "files" )
  OOO0oo ( IIIIiiIIiII1i )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 15 - 15: IIII + oo00000o0
 if 73 - 73: O00O * o00oO0oo0O0O0 * I1i1iiIIi * O00O . i1iI1 - oooOoO
def Ooooo0O0Oo ( ) :
 OOo000Oo = sqlite3 . connect ( Oo )
 o0O = OOo000Oo . cursor ( )
 if 21 - 21: IIII + o00oO0oo0O0O0 . i1iI1 . oo00000o0 % OOoOoO0o0o0OO
 o0O . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHNhZ2FfbmFtZSBmcm9tKFNFTEVDVCBzdWJzdHIoc2FnYSwgcG9zKzEpIEFTIHNhZ2FfbmFtZSBGUk9NKFNFTEVDVCAqLGluc3RyKHNhZ2EsJyMnKSBBUyBwb3MgRlJPTSBwZWxpcyB3aGVyZSBhY3RpdmUgPiAwIGFuZCBzYWdhIGlzIG5vdCBudWxsKSBVTklPTiBTRUxFQ1Qgc3Vic3RyKHNhZ2EsIDEsIHBvcy0xKSBBUyBzYWdhX25hbWUgRlJPTShTRUxFQ1QgKixpbnN0cihzYWdhLCcjJykgQVMgcG9zIEZST00gcGVsaXMgd2hlcmUgYWN0aXZlID4gMCBhbmQgc2FnYSBpcyBub3QgbnVsbCkpIHdoZXJlIHNhZ2FfbmFtZSA8PiAnJyBvcmRlciBieSBzYWdhX25hbWU=' ) )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 OOo000Oo . close ( )
 oOo0 = [ ]
 for iI1IiiII1iI in Ii1I11iIi1I1I :
  Ooo0oo00OO0OO = iI1IiiII1iI [ 0 ]
  try :
   Ooo0oo00OO0OO = Ooo0oo00OO0OO . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  i11iIIi = '[COLOR %s]%s[/COLOR]' % ( I11I1ii , Ooo0oo00OO0OO )
  Iiii1II1IIi = xbmcgui . ListItem ( label = i11iIIi , iconImage = '' )
  IIiii11ii1iIII1I = '{0}?action=saga_detail&saga={1}' . format ( OOo0oOOOO0 , base64 . urlsafe_b64encode ( Ooo0oo00OO0OO ) )
  IIi11I11i = True
  oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "files" )
  OOO0oo ( IIIIiiIIiII1i )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 38 - 38: OoO0ooooo / O00O * IIII * oooOoO / ii1I1ii1IiIi1
 if 35 - 35: O00O % Ii * oOOoo00oo0oO0 * OOO
def OoO00o ( ) :
 Ii1I11iIi1I1I = [ "3D" , "4K" , "Accion" , "Animacion" , "Aventuras" , "Belico" , "Ciencia ficcion" , "Cine negro" , "Comedia" , "Documental" , "Drama" , "Fantastico" , "Infantil" , "Intriga" , "Musical" , "Romance" , "Serie de TV" , "Terror" , "Thriller" , "Western" ]
 oOo0 = [ ]
 for iI1IiiII1iI in Ii1I11iIi1I1I :
  IiOOOOOo0O0 = iI1IiiII1iI
  try :
   IiOOOOOo0O0 = IiOOOOOo0O0 . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  i11iIIi = '[COLOR %s]%s[/COLOR]' % ( I11I1ii , IiOOOOOo0O0 )
  Iiii1II1IIi = xbmcgui . ListItem ( label = i11iIIi , iconImage = '' )
  IIiii11ii1iIII1I = '{0}?action=genero_detail&genero={1}' . format ( OOo0oOOOO0 , base64 . urlsafe_b64encode ( IiOOOOOo0O0 ) )
  IIi11I11i = True
  oOo0 . append ( ( IIiii11ii1iIII1I , Iiii1II1IIi , IIi11I11i ) )
 try :
  xbmcplugin . setContent ( i111IIiiI1I , "files" )
  OOO0oo ( IIIIiiIIiII1i )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i111IIiiI1I , oOo0 , len ( oOo0 ) )
 xbmcplugin . endOfDirectory ( i111IIiiI1I )
 if 32 - 32: oooOoO % IIII
 if 50 - 50: oooOoO / OOoOoO0o0o0OO
def Ii1I1 ( saga , params ) :
 Ii1I11iIi1I1I = oOOoO ( "pelis" , "saga" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ "saga" ] , base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = params )
 if 7 - 7: I1i1iiIIi / I1 / II . oo + oOO . II
def O0OOOOO0OO ( gen , params ) :
 Ii1I11iIi1I1I = oOOoO ( "pelis" , "genero" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ "genero" ] , base64 . urlsafe_b64decode ( gen ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = params )
 if 27 - 27: oooOoO - IIII
def O0OoO000o ( anno , order , params ) :
 Ii1I11iIi1I1I = IiI11I ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ "anno" ] , [ anno ] , order , params )
 OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = params )
 if 100 - 100: IIoooO0ooO0oo / OOO - OoO0ooooo / OoO0ooooo
def oOooOO0o0 ( category , order , params = { } ) :
 Ii1I11iIi1I1I = IiI11I ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active"
 ] , [ "category" ] , category , order , params )
 OoIii1II1i11 ( Ii1I11iIi1I1I , 'pelis' , info = params )
 if 76 - 76: I1i1iiIIi % I1 % OOO . o00oO0oo0O0O0 . O00O - OoO0ooooo
def oOOoO ( table , column_cond , values , id , id_value , order , params = '' ) :
 Oo0000O0O0 = sqlite3 . connect ( Oo )
 o0O = Oo0000O0O0 . cursor ( )
 o0O . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( id ) + " FROM " + table + " WHERE active > 0 and ( " + column_cond + " like '" + id_value + "' or " + column_cond + " like '" + id_value + "#%' or " + column_cond + " like '%#" + id_value + "') order by " + "," . join ( order ) + params )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 Oo0000O0O0 . close ( )
 return Ii1I11iIi1I1I
 if 38 - 38: iiIIi1i1Iii / oooOoO % OOO
def IiI11I ( table , values , ids , ids_value , order , params = '' ) :
 if params and 'sql_limit' in params :
  iI1iiI1Ii = params [ 'sql_limit' ]
 else :
  iI1iiI1Ii = ''
 if params and 'sql_cond' in params :
  if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
   OO0o0o = ' where ' + params [ 'sql_cond' ]
  else :
   OO0o0o = params [ 'sql_cond' ] + ' and '
 else :
  OO0o0o = ''
 Oo0000O0O0 = sqlite3 . connect ( Oo )
 o0O = Oo0000O0O0 . cursor ( )
 if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
  o0O . execute ( "SELECT " + "," . join ( values ) + " FROM " + table + OO0o0o + " order by " + "," . join ( order ) + iI1iiI1Ii )
 else :
  if 57 - 57: OOoOoO0o0o0OO / ii1I1ii1IiIi1 % o00oO0oo0O0O0
  o0O . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + OO0o0o + (
 " = ? and " . join ( ids ) + "=?" ) + " order by " + "," . join ( order ) + iI1iiI1Ii , ids_value )
 Ii1I11iIi1I1I = o0O . fetchall ( )
 Oo0000O0O0 . close ( )
 return Ii1I11iIi1I1I
 if 23 - 23: IIII % II
def iIII ( lin , tit , id , type ) :
 ithil . IiiIi1i11i ( lin , tit , Oo , id , type , 'play' )
 if 38 - 38: O00O + IIoooO0ooO0oo . OOoOoO0o0o0OO - II * OOoOoO0o0o0OO
 if 34 - 34: iiIIi1i1Iii
def OoO0oO ( paramstring ) :
 Iiii1 = dict ( parse_qsl ( paramstring ) )
 if Iiii1 :
  if Iiii1 [ I1i1ii1 ] == ii1i1i1 :
   I1II1iII1I1 ( '==' , 'general' , Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'series_dibujos' :
   I1II1iII1I1 ( 'like' , '%dibujos%' , Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'series_retro' :
   I1II1iII1I1 ( '==' , 'retro' , Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'telenovelas' :
   I1II1iII1I1 ( '==' , 'telenovela' , Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'series_anime' :
   I1II1iII1I1 ( 'like' , '%anime%' , Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'searchSerie' :
   iIIi ( o0OoO0o , 'series' )
  elif Iiii1 [ I1i1ii1 ] == 'searchPeli' :
   iIIi ( iI1I1 , 'pelis' )
  elif Iiii1 [ I1i1ii1 ] == 'seriesByLang' :
   if 'lang' in Iiii1 :
    II1Ii1 ( Iiii1 [ 'lang' ] , 'series' )
   else :
    II1Ii1 ( tab = 'series' )
  elif Iiii1 [ I1i1ii1 ] == 'pelisByLang' :
   if 'lang' in Iiii1 :
    II1Ii1 ( Iiii1 [ 'lang' ] , 'pelis' )
   else :
    II1Ii1 ( tab = 'pelis' )
  elif Iiii1 [ I1i1ii1 ] == 'seriesByAZ' :
   if 'letra' in Iiii1 :
    IIIii ( Iiii1 [ 'letra' ] , 'serie' )
   else :
    IIIii ( type = 'serie' )
  elif Iiii1 [ I1i1ii1 ] == 'series_mas_vistas' :
   oO0OOo00O ( "views" )
  elif Iiii1 [ I1i1ii1 ] == 'series_mas_vistas_mes' :
   oO0OOo00O ( "last_month_views" )
  elif Iiii1 [ I1i1ii1 ] == 'pelis_mas_vistas' :
   ooiiI1iI1 ( [ 'views desc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'pelis_mas_vistas_mes' :
   ooiiI1iI1 ( [ 'last_month_views desc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'pelis_dibujos_mas_vistas' :
   ooiiI1iI1 ( [ 'views desc' ] , { "sql_cond" : "  category = 'Dibujos' and active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'pelis_dibujos_mas_vistas_mes' :
   ooiiI1iI1 ( [ 'last_month_views desc' ] , { "sql_cond" : " category = 'Dibujos' and active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'ultimas_series' :
   i1I ( o0OoO0o , 'series' )
  elif Iiii1 [ I1i1ii1 ] == 'ultimas_pelis' :
   oOooOO0o0 ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , 'puntos' : 'true' } )
  elif Iiii1 [ I1i1ii1 ] == 'serie' :
   iI11 ( Iiii1 [ 'serie_id' ] )
  elif Iiii1 [ I1i1ii1 ] == 'addDownload' :
   oO0Oo000O ( Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'addfav' :
   IiIiI1ii11 ( Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'addfavs' :
   IiIiI1ii11 ( Iiii1 , favoritos = oOo )
  elif Iiii1 [ I1i1ii1 ] == 'addfavp' :
   IiIiI1ii11 ( Iiii1 , favoritos = Ooo )
  elif Iiii1 [ I1i1ii1 ] == 'addfavd' :
   IiIiI1ii11 ( Iiii1 , favoritos = oOOooo00Oooo )
  elif Iiii1 [ I1i1ii1 ] == 'rmfav' :
   iiII1i ( Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'rmfavp' :
   iiII1i ( Iiii1 , favoritos = Ooo )
  elif Iiii1 [ I1i1ii1 ] == 'rmfavd' :
   iiII1i ( Iiii1 , favoritos = oOOooo00Oooo )
  elif Iiii1 [ I1i1ii1 ] == 'rmfavs' :
   iiII1i ( Iiii1 , favoritos = oOo )
  elif Iiii1 [ I1i1ii1 ] == 'listfav' :
   II1iiIiiII ( oOo0oo0 , fav = oO0oOOOOOo0 , favLiteral = '' , text = '' )
  elif Iiii1 [ I1i1ii1 ] == 'listfavs' :
   II1iiIiiII ( oOo , fav = Ii1 , favLiteral = 's' , text = 'Series' )
  elif Iiii1 [ I1i1ii1 ] == 'listfavp' :
   II1iiIiiII ( Ooo , fav = iii1iIII1111I , favLiteral = 'p' , text = 'Pelis' )
  elif Iiii1 [ I1i1ii1 ] == 'listfavd' :
   II1iiIiiII ( oOOooo00Oooo , fav = IIiI11 , favLiteral = 'd' , text = 'Dibujos' )
  elif Iiii1 [ I1i1ii1 ] == 'to_unwatch' :
   OO0OoOoO00 ( Iiii1 [ 'idFile' ] , Iiii1 [ 'idPath' ] , Iiii1 [ 'fileName' ] , False )
  elif Iiii1 [ I1i1ii1 ] == 'to_watch' :
   OO0OoOoO00 ( Iiii1 [ 'idFile' ] , Iiii1 [ 'idPath' ] , Iiii1 [ 'fileName' ] , True )
  elif Iiii1 [ I1i1ii1 ] == 'view_serie' :
   oO0oo0o0o ( Iiii1 [ 'serie_id' ] )
  elif Iiii1 [ I1i1ii1 ] == 'view_temp' :
   Oooo0OoO0 ( Iiii1 [ 'serie_id' ] , Iiii1 [ 'temp_id' ] )
  elif Iiii1 [ I1i1ii1 ] == 'list_temp' :
   oo0oo ( Iiii1 [ 'serie_id' ] , Iiii1 [ 'temp_id' ] , Iiii1 [ 'caratula' ] , Iiii1 [ 'poster' ] )
  elif Iiii1 [ I1i1ii1 ] == 'play' :
   iIII ( Iiii1 [ 'lin' ] , Iiii1 [ 'tit' ] , Iiii1 [ 'id' ] , Iiii1 [ 'type' ] )
  elif Iiii1 [ 'action' ] == 'anyo' :
   iI1I1Ii ( 'anyo_detail' , 'where  active > 0' )
  elif Iiii1 [ 'action' ] == 'anyo_detail' :
   O0OoO000o ( Iiii1 [ 'anno' ] , [ 'nombre asc' ] , { "sql_cond" : "  active > 0 " , "puntos" : "true" } )
  elif Iiii1 [ 'action' ] == 'ultimas_pelis_anyo' :
   oooO0 ( )
  elif Iiii1 [ 'action' ] == 'ultimas_pelis_anyo_detail' :
   O0OoO000o ( Iiii1 [ 'anno' ] , [ 'updated desc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'date' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ 'action' ] == 'anyo_top' :
   iI1I1Ii ( 'anyo_top_detail' , ' where puntos > 0 and  active > 0 ' )
  elif Iiii1 [ 'action' ] == 'anyo_top_detail' :
   O0OoO000o ( Iiii1 [ 'anno' ] , [ 'puntos desc' , 'nombre asc' ] , { 'sql_limit' : ' limit 200' , "sql_cond" : " active > 0 and puntos > 0 " , "puntos" : "true" } )
  elif Iiii1 [ 'action' ] == 'sagas' :
   Ooooo0O0Oo ( )
  elif Iiii1 [ 'action' ] == 'saga_detail' :
   Ii1I1 ( Iiii1 [ 'saga' ] , { "sql_cond" : "  active > 0 " , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ 'action' ] == 'list_generos' :
   OoO00o ( )
  elif Iiii1 [ 'action' ] == 'genero_detail' :
   O0OOOOO0OO ( Iiii1 [ 'genero' ] , { "sql_cond" : "  active > 0 " , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'peli_inf' :
   oOooOO0o0 ( [ 'Dibujos' ] , [ 'nombre' ] , { "sql_cond" : "  active > 0 " , "puntos" : "true" , 'anno' : 'true' } )
  elif Iiii1 [ I1i1ii1 ] == 'top_peli_inf' :
   oOooOO0o0 ( [ 'Dibujos' ] , [ 'puntos desc' , 'nombre asc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'pelisByAZ' :
   if 'letra' in Iiii1 :
    IIIii ( Iiii1 [ 'letra' ] , 'peli' )
   else :
    IIIii ( type = 'peli' )
  elif Iiii1 [ I1i1ii1 ] == 'last_peli_inf' :
   oOooOO0o0 ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , { "sql_cond" : "  active > 0 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , "puntos" : "true" } )
  elif Iiii1 [ I1i1ii1 ] == 'series_menu' :
   oOoooOooOOo0Oo ( iiii1IIIIi1II ( 'Series' ) )
  elif Iiii1 [ I1i1ii1 ] == 'pelis_menu' :
   oOoooOooOOo0Oo ( iiii1IIIIi1II ( 'Pelis' ) )
  elif Iiii1 [ I1i1ii1 ] == 'dibujos_menu' :
   oOoooOooOOo0Oo ( iiii1IIIIi1II ( 'Dibujos' ) )
  elif Iiii1 [ I1i1ii1 ] == 'herramientas_menu' :
   oOoooOooOOo0Oo ( iiii1IIIIi1II ( 'Herramientas' ) )
  elif Iiii1 [ I1i1ii1 ] == 'validateFolderConfig' :
   iI11I1IiiI1ii ( )
  elif Iiii1 [ I1i1ii1 ] == 'clean' :
   O0000o00o00O ( )
  elif Iiii1 [ I1i1ii1 ] == 'downloads' :
   IiIiI ( )
  elif Iiii1 [ I1i1ii1 ] == 'playLocal' :
   i111IIiiI1I = int ( sys . argv [ 1 ] )
   OoooO0OoOO = xbmcgui . ListItem ( path = base64 . urlsafe_b64decode ( Iiii1 [ 'path' ] ) )
   if 71 - 71: IIoooO0ooO0oo / IIoooO0ooO0oo * II
   xbmcplugin . setResolvedUrl ( i111IIiiI1I , True , OoooO0OoOO )
  elif Iiii1 [ I1i1ii1 ] == 'rmDownload' :
   oo0o00ooO ( Iiii1 )
  elif Iiii1 [ I1i1ii1 ] == 'validateCredentials' :
   Ooo00O0OOoO ( )
  elif Iiii1 [ I1i1ii1 ] == 'createCopy' :
   Ii1Ii11i1 ( )
  elif Iiii1 [ I1i1ii1 ] == 'restoreCopy' :
   oooOOOOoO ( )
 else :
  if 68 - 68: IiII1IiI * I1 + iiIIi1i1Iii - OoO0ooooo % oo00000o0
  iiI ( Oo )
  oOoooOooOOo0Oo ( iiii1IIIIi1II ( "default" ) )
  if 70 - 70: Ii / i1iI1 - O00O / IIII
  if 5 - 5: O00O - IiII1IiI % O00O
if __name__ == '__main__' :
 OoO0oO ( sys . argv [ 2 ] [ 1 : ] )
 if 98 - 98: o00oO0oo0O0O0 * OoO0ooooo / II
 if 94 - 94: Ii
 if 12 - 12: ii1I1ii1IiIi1 - IiII1IiI - OOO / IIoooO0ooO0oo % IIII
 if 88 - 88: oooOoO . ii1I1ii1IiIi1 * IIII + II
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')