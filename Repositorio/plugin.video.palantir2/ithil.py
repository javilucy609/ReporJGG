import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IG9zCmltcG9ydCB4Ym1jZ3VpCmltcG9ydCB4Ym1jCmltcG9ydCBIVE1MUGFyc2VyCmltcG9ydCB4Ym1jcGx1Z2luCmltcG9ydCB4Ym1jYWRkb24KaW1wb3J0IHVybGxpYgppbXBvcnQgdXJsbGliMgppbXBvcnQgc3FsaXRlMwppbXBvcnQgYmFzZTY0CmltcG9ydCB6bGliCmZyb20gdXJsbGliMiBpbXBvcnQgSFRUUEVycm9yCmZyb20gdXJsbGliMiBpbXBvcnQgVVJMRXJyb3IKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgdW5pY29kZWRhdGEKaWYgOTcgLSA5NzogT09vT29PMG8wbzBPTyArIElJSUkgLiBJaSAlIG9PTwpfX3NldHRpbmdzX18gPSB4Ym1jYWRkb24gLiBBZGRvbiAoIGlkID0gInBsdWdpbi52aWRlby5wYWxhbnRpciIgKQppZiAxIC0gMTogSUkgLSBpaUlJaTFpMUlpaSAtIEkxIC0gSUlvb29PMG9vTzBvbyAqIE9PTwppZiA1IC0gNTogaTFpSTEgKyBvMDBvTzBvbzBPME8wIC0gaWkxSTFpaTFJaUlpMSAlIG9vb09vTyAtIElpSUkxSWlJCmlmIDg1IC0gODU6IG9vCmlmIDcwIC0gNzA6IGlJaTExICsgSWkxSSAvIEkxSWlJMUlJSTExaSArIG9vT29vTzBPT08gJSBJaUlJMWkxSSAvIGlJaTExCmRlZiBvbzBvICggdGV4dCApIDoKIE9PTzBPMDBPMCA9ICc3U2UxMGdBSWUtVDBfYScKIGlmIDE3IC0gMTc6IElJb29vTzBvb08wb28KIE9PTzBPMDBPMCA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ04xTmxNVEJuUVVsbExWUXdYMkU9JyApCiB0cnkgOgogIG8wb29vID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBzdHIgKCB0ZXh0ICkgKQogIElJMTExMUkxID0gWyBdCiAgZm9yIE8wME9vbzBvME9PIGluIHhyYW5nZSAoIGxlbiAoIG8wb29vICkgKSA6CiAgIEkxaUkxaWlpSWlJMSA9IE9PTzBPMDBPMCBbIE8wME9vbzBvME9PICUgbGVuICggT09PME8wME8wICkgXQogICBPTzBPMCA9IGNociAoIG9yZCAoIG8wb29vIFsgTzAwT29vMG8wT08gXSApIC0gb3JkICggSTFpSTFpaWlJaUkxICkgJSAyNTYgKQogICBJSTExMTFJMSAuIGFwcGVuZCAoIE9PME8wICkKICBpaTFpMWlpMUkgPSAnJyAuIGpvaW4gKCBJSTExMTFJMSApCiAgcmV0dXJuIGlpMWkxaWkxSQogZXhjZXB0IFR5cGVFcnJvciAsIG8wbzAwMDBPMCA6CiAgcmV0dXJuIHRleHQKICBpZiA3MCAtIDcwOiBpMWlJMSAlIElpMUkKICBpZiA2NCAtIDY0OiBvbyAuIE9Pb09vTzBvMG8wT08gLiBPT08gLSBpaTFJMWlpMUlpSWkxIC4gb29vT29PICogSWkKICBpZiA2MyAtIDYzOiBPT29Pb08wbzBvME9PIC4gaWlJSWkxaTFJaWkgLyBJSW9vb08wb29PMG9vIC4gSWkgLyBJSW9vb08wb29PMG9vICUgaWkxSTFpaTFJaUlpMQogIGlmIDMgLSAzOiBpSWkxMSAlIG9vT29vTzBPT08gKiBJaUlJMWkxSSAvIE9PTyAqIElpSUkxaTFJCiAgaWYgNTEgLSA1MTogaWlJSWkxaTFJaWkgLiBJaUlJMWkxSSAlIE9Pb09vTzBvMG8wT08KICBpZiAzMSAtIDMxOiBpMWlJMSAvIGkxaUkxICUgSUkgKiBJaUlJMWkxSSAtIElJCmRlZiBPT28wMDAwb08gKCApIDoKIHJldHVybiAnZUp6TEtDa3BzTkxYTDgtc1NpeEtTVTRzeVVfTTBVc3RyZ1JpX1lERW5NUzhrc3dpQU8yLURVMD0nCiBpZiA0OCAtIDQ4OiBpaUlJaTFpMUlpaSAlIE9PTwogaWYgNTIgLSA1MjogSUkKZGVmIEkxMTFJMTFJMTExMTEgKCBiYXMgKSA6CiBJSUlpaTFJaSA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmFzICkKIE9PMG8gPSBJSUlpaTFJaSAuIGN1cnNvciAoICkKIEkxMWlJaUlJaSA9ICcnCiBpZiAyOCAtIDI4OiBJSUlJCiB0cnkgOgogIGlmIDU2IC0gNTY6IGlpSUlpMWkxSWlpICsgSUlJSSAuIElpSUkxaTFJIC0gb29Pb29PME9PTyArIG9vIC8gSWlJSTFJaUkKICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1UyVnNaV04wSUd4dll5Qm1jbTl0SUhabGNuTnBiMjQ9JyApICkKICBvTyA9IE9PMG8gLiBmZXRjaG9uZSAoICkKICBJMTFpSWlJSWkgPSBvTyBbIDAgXQogIElJSWlpMUlpIC4gY2xvc2UgKCApCiBleGNlcHQgOgogIHRyeSA6CiAgIElJSWlpMUlpIC4gY2xvc2UgKCApCiAgZXhjZXB0IDoKICAgcGFzcwogICBpZiA0MCAtIDQwOiBpaTFJMWlpMUlpSWkxICogb28gLyBJMQogIHRyeSA6CiAgIG9zIC4gcmVtb3ZlICggYmFzICkKICBleGNlcHQgOgogICBwYXNzCiByZXR1cm4gc3RyICggSTExaUlpSUlpIC4gc3RyaXAgKCApICkKIGlmIDI4IC0gMjg6IGlJaTExIC0gbzAwb08wb28wTzBPMCAvIG9vT29vTzBPT08gKyBJaUlJMWkxSSAvIElpCiBpZiA0MSAtIDQxOiBpMWlJMSAtIE9PTyAlIEkxSWlJMUlJSTExaSAtIElJb29vTzBvb08wb28gKyBJMUlpSTFJSUkxMWkKZGVmIEkxaWlJMUkgKCB1cmwgLCBwb3N0ID0gTm9uZSApIDoKIGlmIDEyIC0gMTI6IGlpMUkxaWkxSWlJaTEKIG9PT08wME9vT28gPSB7ICdVc2VyLUFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA1LjE7IGVuLUdCOyBydjoxLjguMS4xNCkgR2Vja28vMjAwODA0MDQgRmlyZWZveC8yLjAuMC4xNCcgfQogSWlpMTFJaUkxMWkgPSB1cmxsaWIyIC4gdXJsb3Blbgogb28wTzAgPSB1cmxsaWIyIC4gUmVxdWVzdAogSWkxMSA9IG9vME8wICggdXJsICwgcG9zdCAsIG9PT08wME9vT28gKQogSTExSWlpMTFpMUlpMSA9IElpaTExSWlJMTFpICggSWkxMSApCiBpaUlJID0gSTExSWlpMTFpMUlpMSAuIHJlYWQgKCApCiByZXR1cm4gaWlJSQogaWYgNTEgLSA1MTogSUlJSSAvIGlpSUlpMWkxSWlpCmRlZiBvT09PME8wICggYmQgLCBpZCAsIHZhbCAsIHR5cGUgKSA6CiB0cnkgOgogIEkxMWlJaUlJaSA9IHpsaWIgLiBkZWNvbXByZXNzICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMTExSTExSTExMTExICggYmQgKSApICkKICBpZiA2NyAtIDY3OiBpaTFJMWlpMUlpSWkxIC0gb29Pb29PME9PTyArIG9vb09vTyAqIEkxCiAgSTFpID0gKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12UW1GelpVUmhkRzl6TDNGMVlXeHBkSGt1Y0dod1AzUjVjR1U5SlhOcFpEMGxjeVoyWVd3OUpYTT0nICkgKSAlICgKIEkxMWlJaUlJaSAsIHR5cGUgLCBpZCAsIHN0ciAoIHZhbCApICkKICBJMWlpSTFJICggSTFpICkKICBJaTFpID0gaWQgLiBzcGxpdCAoICctJyApCiAgaWYgNzYgLSA3Njogb29Pb29PME9PTyArIG9vT29vTzBPT08KICBJSUlpaTFJaSA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmQgKQogIE9PMG8gPSBJSUlpaTFJaSAuIGN1cnNvciAoICkKICBpZiB0eXBlID09ICdzZXJpZXMnIDoKICAgaWYgSWkxaSBbIDIgXSA6CiAgICBpZiA3OSAtIDc5OiBJSSArIElpSUkxaTFJCiAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICgKICdWVkJFUVZSRklHTmhjR2wwZFd4dmN5QlRSVlFnY1hWaGJHbDBlVDBfSUZkSVJWSkZJSE5sY21sbFgybGtJRDBnUHlCQlRrUWdkR1Z0Y0Y5cFpDQTlJRDhnUVU1RUlHTmhjR2wwZFd4dlgybGtJRDBnUHc9PScgKSAsCiAoIHN0ciAoIHZhbCApICwgaW50ICggSWkxaSBbIDAgXSApICwgaW50ICggSWkxaSBbIDEgXSApICwgSWkxaSBbIDIgXSAsICkgKQogICBlbGlmIElpMWkgWyAxIF0gOgogICAgaWYgODEgLSA4MTogSWlJSTFpMUkgLiBJMUlpSTFJSUkxMWkgKyBJSUlJICogb09PCiAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1ZWQkVRVlJGSUhObGNtbGxjMTkwWlcxd0lGTkZWQ0J4ZFdGc2FYUjVQVDhnVjBoRlVrVWdjMlZ5YVdWZmFXUWdQU0FfSUVGT1JDQjBaVzF3WDJsa0lEMGdQdz09JyApICwKICggc3RyICggdmFsICkgLCBpbnQgKCBJaTFpIFsgMCBdICkgLCBpbnQgKCBJaTFpIFsgMSBdICkgLCApICkKICAgZWxpZiBJaTFpIFsgMCBdIDoKICAgIGlmIDUzIC0gNTM6IE9PTwogICAgT08wbyAuIGV4ZWN1dGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdWVkJFUVZSRklITmxjbWxsY3lCVFJWUWdjWFZoYkdsMGVUMF9JRmRJUlZKRklITmxjbWxsWDJsa0lEMGdQdz09JyApICwKICggc3RyICggdmFsICkgLCBpbnQgKCBJaTFpIFsgMCBdICkgLCApICkKICBlbHNlIDoKICAgaWYgMzYgLSAzNjogb28KICAgT08wbyAuIGV4ZWN1dGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdWVkJFUVZSRklIQmxiR2x6SUZORlZDQnhkV0ZzYVhSNVBUOGdWMGhGVWtVZ2NHVnNhVjlwWkNBOUlEOD0nICkgLAogKCBzdHIgKCB2YWwgKSAsIGludCAoIElpMWkgWyAwIF0gKSAsICkgKQogIElJSWlpMUlpIC4gY29tbWl0ICggKQogIElJSWlpMUlpIC4gY2xvc2UgKCApCiBleGNlcHQgRXhjZXB0aW9uIGFzIG8wbzAwMDBPMCA6CiAgcGFzcwogIGlmIDE2IC0gMTY6IG9vCiAgaWYgNzQgLSA3NDogT09PICogSUlvb29PMG9vTzBvbwpkZWYgaTExSWkgKCBsaW5rICwgYmQgLCBpZCAsIHRlbXBfaWQgPSAwICkgOgogaTFpaWkxSWlJaSA9IFsgXQogdHJ5IDoKICBpaTFJMUlpaSA9IHsgJ1VzZXItYWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjE5LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTkuMCcgfQogIEkxaSA9IG9vMG8gKCBzdHIgKCBsaW5rICkgKQogIGlpMUkxSWlpIFsgJ3JlZmVyZXInIF0gPSAnLycgLiBqb2luICggSTFpIC4gc3BsaXQgKCAnLycgKSBbIDogNCBdICkKICBpaTFJMUlpaSBbICdjb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiAgSWkxMSA9IHVybGxpYjIgLiBSZXF1ZXN0ICggSTFpICwgTm9uZSAsIGlpMUkxSWlpICkKICBJMTFJaWkxMWkxSWkxID0gdXJsbGliMiAuIHVybG9wZW4gKCBJaTExICkKICBpaUlJID0gSTExSWlpMTFpMUlpMSAuIHJlYWQgKCApCiAgSTExSWlpMTFpMUlpMSAuIGNsb3NlICggKQogIG8wT29PMG8gPSAnLycgLiBqb2luICggSTFpIC4gc3BsaXQgKCAnLycgKSBbIDAgOiA1IF0gKQogIGkxSWkxSUkgPSByZSAuIGZpbmRhbGwgKCAnY2xhc3M9Imxpc3Rfcm93Ii4qZGF0YS1maWxlLWlkPSIoLio/KSInICwgaWlJSSApCiAgaWYgMTEgLSAxMTogbzAwb08wb28wTzBPMCAvIG9vb09vTyAlIElpSUkxaTFJCiAgaTFpSWlpID0gcmUgLiBmaW5kYWxsICggJ2NsYXNzPSJuYW1lIj5ccyo8YS4qZGF0YS1hY3Rpb24tYmVmb3JlPSJwcmV2aWV3Ii4qPiguKj8pPC9hPicgLCBpaUlJICkKICBvbzBPT08wTyA9IEhUTUxQYXJzZXIgLiBIVE1MUGFyc2VyICggKQogIGlmIDE2IC0gMTY6IElJSUkgKyBvb09vb08wT09PCiAgaWYgbGVuICggaTFJaTFJSSApID4gMCA6CiAgIHRyeSA6CiAgICBJSUlpaTFJaSA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmQgKQogICAgT08wbyA9IElJSWlpMUlpIC4gY3Vyc29yICggKQogICAgaWYgdGVtcF9pZCA+IDAgOgogICAgIGlmIDE1IC0gMTU6IElpMUkgLiBJMUlpSTFJSUkxMWkgLiBvbyArIG8wMG9PMG9vME8wTzAgLSBvb09vb08wT09PIC8gaUlpMTEKICAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyVnNaV04wSUc1ZlpYQnBJR1p5YjIwZ2MyVnlhV1Z6WDNSbGJYQWdWMGhGVWtVZ2MyVnlhV1ZmYVdRZ1BTQV9JRUZPUkNCMFpXMXdYMmxrSUQwZ1B3PT0nICkgLCAoIGlkICwgdGVtcF9pZCAsICkgKQogICAgZWxzZSA6CiAgICAgaWYgMzUgLSAzNTogbzAwb08wb28wTzBPMCAlIG8wMG9PMG9vME8wTzAKICAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyVnNaV04wSUc1ZlpYQnBJR1p5YjIwZ2MyVnlhV1Z6SUZkSVJWSkZJSE5sY21sbFgybGtJRDBnUHc9PScgKSAsICggaWQgLCApICkKICAgIG9PID0gT08wbyAuIGZldGNob25lICggKQogICAgSUlJaWkxSWkgLiBjbG9zZSAoICkKICAgIGlmIG9PIFsgMCBdIDwgbGVuICggaTFJaTFJSSApIDoKICAgICBJMTFpSWlJSWkgPSB6bGliIC4gZGVjb21wcmVzcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggSTExMUkxMUkxMTExMSAoIGJkICkgKSApCiAgICAgaWYgdGVtcF9pZCA+IDAgOgogICAgICBpZiA1MiAtIDUyOiBJSUlJIC0gaWlJSWkxaTFJaWkgJSBvb29Pb08gLSBJSW9vb08wb29PMG9vICsgSTFJaUkxSUlJMTFpCiAgICAgIEkxaSA9ICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnSlhNdlFtRnpaVVJoZEc5ekwyVndhUzV3YUhBX2FXUTlKWE1tZEdWdGNEMGxjeVoyWVd3OUpYTT0nICkgKSAlICgKIEkxMWlJaUlJaSAsIGlkICwgdGVtcF9pZCAsIHN0ciAoIGxlbiAoIGkxSWkxSUkgKSApICkKICAgICBlbHNlIDoKICAgICAgaWYgNyAtIDc6IEkxSWlJMUlJSTExaSAlIG9vICogaTFpSTEKICAgICAgSTFpID0gKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12UW1GelpVUmhkRzl6TDJWd2FTNXdhSEFfYVdROUpYTW1kbUZzUFNWeicgKSApICUgKAogSTExaUlpSUlpICwgaWQgLCBzdHIgKCBsZW4gKCBpMUlpMUlJICkgKSApCiAgICAgSTFpaUkxSSAoIEkxaSApCiAgICAgaWYgNTYgLSA1Njogb29vT29PIC4gaUlpMTEKICAgICBJSUlpaTFJaSA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmQgKQogICAgIE9PMG8gPSBJSUlpaTFJaSAuIGN1cnNvciAoICkKICAgICBpZiB0ZW1wX2lkID4gMCA6CiAgICAgIGlmIDQ4IC0gNDg6IElJSUkgLiBJaSAlIGkxaUkxIC4gbzAwb08wb28wTzBPMCAuIG9vb09vTyAlIElpCiAgICAgIE9PMG8gLiBleGVjdXRlICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnVlZCRVFWUkZJSE5sY21sbGMxOTBaVzF3SUZORlZDQnVYMlZ3YVQwX0lGZElSVkpGSUhObGNtbGxYMmxrSUQwZ1B5QkJUa1FnZEdWdGNGOXBaQ0E5SUQ4PScgKSAsICggbGVuICggaTFJaTFJSSApICwgaWQgLCB0ZW1wX2lkICwgKSApCiAgICAgZWxzZSA6CiAgICAgIGlmIDMyIC0gMzI6IGlpMUkxaWkxSWlJaTEgKyBJMSAtIElpSUkxaTFJICUgSWkxSSArIG9PTwogICAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1ZWQkVRVlJGSUhObGNtbGxjeUJUUlZRZ2JsOWxjR2s5UHlCWFNFVlNSU0J6WlhKcFpWOXBaQ0E5SUQ4PScgKSAsICggbGVuICggaTFJaTFJSSApICwgaWQgLCApICkKICAgICBJSUlpaTFJaSAuIGNvbW1pdCAoICkKICAgICBJSUlpaTFJaSAuIGNsb3NlICggKQogICBleGNlcHQgRXhjZXB0aW9uIGFzIG8wbzAwMDBPMCA6CiAgICBwYXNzCiAgZm9yIGlpMTFpSUlpMUkgaW4geHJhbmdlICggMCAsIGxlbiAoIGkxSWkxSUkgKSApIDoKICAgaTFpaWkxSWlJaSAuIGFwcGVuZCAoICggb28wT09PME8gLiB1bmVzY2FwZSAoIGkxaUlpaSBbIGlpMTFpSUlpMUkgXSAuIGRlY29kZSAoICd1dGYtOCcgKSApICwgbzBPbyAoICclcy9wLCVzLGxpc3QsMSwzLmF2aScgJSAoIG8wT29PMG8gLCBpMUlpMUlJIFsgaWkxMWlJSWkxSSBdICkgKSApICkKIGV4Y2VwdCAoIEhUVFBFcnJvciAsIFVSTEVycm9yICkgYXMgbzBvMDAwME8wIDoKICBJMWkxSTFpSTExSSA9IHhibWNndWkgLiBMaXN0SXRlbSAoICdFbmxhY2UgYm9ycmFkbycgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKSAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogIGlpSUlpaUlJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsICdFbmxhY2UgYm9ycmFkbycgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKIHJldHVybiBpMWlpaTFJaUlpCiBpZiA2NiAtIDY2OiBpMWlJMSAlIEkxICogSTEKZGVmIE9PbzBvbyAoIHVybCAsIGRlY29kZSA9IFRydWUgKSA6CiBpZiBkZWNvZGUgOgogIHVybCA9IG9vMG8gKCB1cmwgKQogIGlmIDYgLSA2OiBvb09vb08wT09PIC8gb09PIC8gaUlpMTEKIGlmIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1pHbHphMjlyYjNOdGFXdHYnICkgaW4gdXJsIDoKICByZXR1cm4gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnWkdzPScgKQogIGlmIDEwIC0gMTA6IG9vb09vTyArIG9vICogb28KIGVsaWYgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnWTI5d2FXRndiM0E9JyApIGluIHVybCA6CiAgcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1kzQT0nICkKICBpZiA3OSAtIDc5OiBJMSAvIElpSUkxSWlJIC8gb29Pb29PME9PTwogZWxpZiBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdjM1J5WldGdFkyeHZkV1E9JyApIGluIHVybCA6CiAgcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyTT0nICkKICBpZiA5IC0gOTogaTFpSTEgKyBvMDBvTzBvbzBPME8wIC4gb29Pb29PME9PTyAlIG9vb09vTyAuIG9vCiBlbGlmIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2NHRnlkR0ZuYjNKaCcgKSBpbiB1cmwgOgogIHJldHVybiBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdjSFE9JyApCiAgaWYgODIgLSA4MjogSWkxSSAqIGkxaUkxIC0gb28gLiBpaUlJaTFpMUlpaSAuIEkxSWlJMUlJSTExaSAlIG8wMG9PMG9vME8wTzAKIGVsaWYgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnYTJKaFoyaz0nICkgaW4gdXJsIDoKICByZXR1cm4gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnYTJJPScgKQogIGlmIDc2IC0gNzY6IElpSUkxaTFJICUgaUlpMTEgKyBPT08gKyBpaTFJMWlpMUlpSWkxCiBlbGlmIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2NuUjJaUT09JyApIGluIHVybCA6CiAgcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2NtVT0nICkKICBpZiA2NyAtIDY3OiBJSQogZWxpZiBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdlVzkxZEhWaVpRPT0nICkgaW4gdXJsIDoKICByZXR1cm4gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnZVhRPScgKQogIGlmIDI0IC0gMjQ6IElJIC8gb29vT29PIC0gT09vT29PMG8wbzBPTyAtIGlpMUkxaWkxSWlJaTEKIGVsaWYgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnWjJ4dmNtbGhMblIyJyApIGluIHVybCA6CiAgcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MzUmhibVJoY21RPScgKQogIGlmIDQwIC0gNDA6IElJIC0gSUlvb29PMG9vTzBvbyAvIGlJaTExICogSUkgLiBJaQogZWxzZSA6CiAgcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2RXcz0nICkKICBpZiA3OCAtIDc4OiBJaTFJICsgT09PIC0gb09PCiAgaWYgMzIgLSAzMjogSWkgLiBpaUlJaTFpMUlpaSAvIG9vb09vTyAlIElpSUkxaTFJIC8gSTEgKiBvMDBvTzBvbzBPME8wCmRlZiBvTzAwMG9PTzAwb28wICggc2VydmVyICwgbGluayApIDoKIGlJID0gbGluayAuIHNwbGl0ICggJy8nICkKIG9PT09PMDAgPSAnLycgLiBqb2luICggaUkgWyAzIDogNCBdICkKIElpSWlJID0gJy8nIC4gam9pbiAoIGlJIFsgNCA6IDUgXSApCiBsaW5rID0gaUkgWyA1IF0gLiBzcGxpdCAoICcsJyApIFsgMSBdCiBJaTFJSTExSWlJID0gbGluawogbzBvID0gJyVzLy0lcy9wLCVzLGxpc3QsMSwzLmF2aScgJSAoIG9PT09PMDAgLCBJaUlpSSAsIGxpbmsgKQogSTFpID0gJyVzLyVzLycgJSAoIHNlcnZlciAsIG9PT09PMDAgKQogaWkxSTFJaWkgPSB7ICdVc2VyLWFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjoxOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzE5LjAnIH0KIG9vMG9vb29PME8wID0gJyVzLyVzJyAlICggc2VydmVyICwgbzBvICkKIGlpMUkxSWlpIFsgJ3JlZmVyZXInIF0gPSBJMWkKIGlpMUkxSWlpIFsgJ2Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIElpMTEgPSB1cmxsaWIyIC4gUmVxdWVzdCAoIG9vMG9vb29PME8wICwgTm9uZSAsIGlpMUkxSWlpICkKIEkxMUlpaTExaTFJaTEgPSB1cmxsaWIyIC4gdXJsb3BlbiAoIElpMTEgKQogaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogSTExSWlpMTFpMUlpMSAuIGNsb3NlICggKQogTzAwME8wT29PbyA9IHJlIC4gZmluZGFsbCAoICdEb3dubG9hZEZpbGUuKmY9JXMiLipSZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4uKj92YWx1ZT0iKFteIl0rKScgJSBsaW5rICwgaWlJSSApCiBPb09PME9PMG8wTyA9IDAKIHRyeSA6CiAgTzAwME8wT29PbyA9IE8wMDBPME9vT28gWyAwIF0KIGV4Y2VwdCA6CiAgT29PTzBPTzBvME8gPSAxCiAgaWYgMzkgLSAzOTogaTFpSTEgJSBvT08gLiBvMDBvTzBvbzBPME8wIC0gb28gKiBJaUlJMWkxSQogaWYgT29PTzBPTzBvME8gPT0gMCA6CiAgaTFpID0gJyVzL2FjdGlvbi9Eb3dubG9hZEZpbGU/bG9jYXRpb249ZmkmYW1wO2Y9JXMnICUgKCBzZXJ2ZXIgLCBJaTFJSTExSWlJICkKICBPME9vMDBvME8gPSAnZmlsZUlkPSVzJl9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuPSVzJyAlICggSWkxSUkxMUlpSSAsIE8wMDBPME9vT28gKQogIGlpMUkxSWlpIFsgJ3JlZmVyZXInIF0gPSBvbzBvb29vTzBPMAogIGlpMUkxSWlpIFsgJ2Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKICBJaTExID0gdXJsbGliMiAuIFJlcXVlc3QgKCBpMWkgLCBPME9vMDBvME8gLCBpaTFJMUlpaSApCiAgSTExSWlpMTFpMUlpMSA9IHVybGxpYjIgLiB1cmxvcGVuICggSWkxMSApCiAgaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogIEkxMUlpaTExaTFJaTEgLiBjbG9zZSAoICkKICBsaW5rID0gcmUgLiBmaW5kYWxsICggJ0Rvd25sb2FkVXJsIjoiKFteIl0rKScgLCBpaUlJICkKICBJaTExaTEgPSBsaW5rIFsgMCBdCiBlbHNlIDoKICBJaTExaTEgPSAnJwogcmV0dXJuIElpMTFpMSAuIHN0cmlwICggKQogaWYgOTEgLSA5MTogSWkgKiBpMWlJMQogaWYgMjQgLSAyNDogSWlJSTFpMUkgLSBvb29Pb08gKiBJSSArIGlpSUlpMWkxSWlpCiBpZiA3MiAtIDcyOiBJaTFJIC4gSTFJaUkxSUlJMTFpICogSWkKZGVmIG8wT28gKCBzdHJpbmcgKSA6CiBPT08wTzAwTzAgPSAnN1NlMTBnQUllLVQwX2EnCiBJSTExMTFJMSA9IFsgXQogZm9yIE8wME9vbzBvME9PIGluIHhyYW5nZSAoIGxlbiAoIHN0cmluZyApICkgOgogIEkxaUkxaWlpSWlJMSA9IE9PTzBPMDBPMCBbIE8wME9vbzBvME9PICUgbGVuICggT09PME8wME8wICkgXQogIE9PME8wID0gY2hyICggb3JkICggc3RyaW5nIFsgTzAwT29vMG8wT08gXSApICsgb3JkICggSTFpSTFpaWlJaUkxICkgJSAyNTYgKQogIElJMTExMUkxIC4gYXBwZW5kICggT08wTzAgKQogaWkxaTFpaTFJID0gJycgLiBqb2luICggSUkxMTExSTEgKQogcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggaWkxaTFpaTFJICkKIGlmIDk0IC0gOTQ6IG9vIC8gaUlpMTEgKyBvMDBvTzBvbzBPME8wIC8gb28gLiBJaUlJMUlpSSAqIElpMUkKIGlmIDIyIC0gMjI6IG9vT29vTzBPT08gLiBJaUlJMWkxSSArIGlpMUkxaWkxSWlJaTEKZGVmIElJMWlpMTExMTFJaWkgKCBiYXNlICkgOgogaTFJSUkgPSAna2JhZ2kuY29tJwogaWYgODEgLSA4MTogSUkgLSBpaTFJMWlpMUlpSWkxIC8gaUlpMTEgKyBvb29Pb08KIE8wT29vMG8gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdhSFIwY0RvdkwydGlZV2RwTG1OdmJTOWhZM1JwYjI0dlFXTmpiM1Z1ZEM5TWIyZHBiajl5WlhSMWNtNVZjbXc5JyApCiBPME9vMDBvME8gPSBOb25lCiBvT09PMDBPb09vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvT09PMDBPb09vIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIE8wT29vMG8gLCBPME9vMDBvME8gLCBvT09PMDBPb09vICkKIEkxMUlpaTExaTFJaTEgPSBJaWkxMUlpSTExaSAoIElpMTEgKQogT08wTyA9IEkxMUlpaTExaTFJaTEgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBpaUlJID0gSTExSWlpMTFpMUlpMSAuIHJlYWQgKCApCiBpMUlpMUlJID0gcmUgLiBzZWFyY2ggKCAnIi4qP19fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuLio/dmFsdWU9IiguKj8pIicgLCBpaUlJICkKIE8wMDBPME9vT28gPSBpMUlpMUlJIC4gZ3JvdXAgKCAxICkKIGkxaSA9ICdodHRwOi8vJXMvYWN0aW9uL0FjY291bnQvTG9naW4nICUgaTFJSUkKIG9PT08wME9vT28gPSB7ICdVc2VyLUFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo1MC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzUwLjAnIH0KIG9PT08wME9vT28gWyAnQWNjZXB0JyBdID0gJyovKicKIG9PT08wME9vT28gWyAnQWNjZXB0LUxhbmd1YWdlJyBdID0gJ2VzLUVTLGVzO3E9MC44LGVuLVVTO3E9MC41LGVuO3E9MC4zJwogb09PTzAwT29PbyBbICdBY2NlcHQtRW5jb2RpbmcnIF0gPSAnZ3ppcCwgZGVmbGF0ZScKIG9PT08wME9vT28gWyAnQ29udGVudC1UeXBlJyBdID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcKIG9PT08wME9vT28gWyAnWC1SZXF1ZXN0ZWQtV2l0aCcgXSA9ICdYTUxIdHRwUmVxdWVzdCcKIG9PT08wME9vT28gWyAnUmVmZXJlcicgXSA9IE8wT29vMG8KIG9PT08wME9vT28gWyAnQ29va2llJyBdID0gT08wTwogb09PTzAwT29PbyBbICdDb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBPMDBPbzAwTyA9IGlpSWlpMWkgKCBiYXNlICwgJ2tiZycgKQogaWYgMiAtIDI6IElpIC8gT09vT29PMG8wbzBPTyAuIE9Pb09vTzBvMG8wT08gLiBJSUlJCiBPME9vMDBvME8gPSAnX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49JXMmVXNlck5hbWU9JXMmUGFzc3dvcmQ9JXMnICUgKCBPMDAwTzBPb09vICwgTzAwT28wME8gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgLCBPMDBPbzAwTyBbIDEgXSAuIGVuY29kZSAoICd1dGYtOCcgKSApCiBpZiA3MiAtIDcyOiBvT08gLSBPT08gLiBvb29Pb08KIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIGkxaSAsIE8wT28wMG8wTyAsIG9PT08wME9vT28gKQogSTExSWlpMTFpMUlpMSA9IElpaTExSWlJMTFpICggSWkxMSApCiBpZiA2MCAtIDYwOiBvb29Pb08gLyBpaTFJMWlpMUlpSWkxICogb29vT29PCiBpaUlJID0gSTExSWlpMTFpMUlpMSAuIHJlYWQgKCApCiBpZiAyMiAtIDIyOiBvbyAvIElJb29vTzBvb08wb28gLSBJaUlJMWkxSQogcmV0dXJuICdUeXBlIjoiUmVkaXJlY3QnIGluIGlpSUkgLiByZXBsYWNlICggJyAnICwgJycgKQogaWYgMTcgLSAxNzogb09PIC0gSUlJSSArIEkxCiBpZiAyNyAtIDI3OiBJMQpkZWYgb28wTzBvb28gKCBzZXJ2ZXIgLCBsaW5rICwgYmFzZSApIDoKIGlJID0gbGluayAuIHNwbGl0ICggJy8nICkKIG9PT09PMDAgPSAnLycgLiBqb2luICggaUkgWyAzIDogNCBdICkKIElpSWlJID0gJy8nIC4gam9pbiAoIGlJIFsgNCA6IDUgXSApCiBsaW5rID0gaUkgWyA1IF0gLiBzcGxpdCAoICcsJyApIFsgMSBdCiBPME9vbzBvID0gJ2h0dHA6Ly8lcy8lcy96LSVzL3osJXMsbGlzdCwxLDIuYmluJyAlICggc2VydmVyICwgb09PT08wMCAsIElpSWlJICwgbGluayApCiBPME9vMDBvME8gPSBOb25lCiBvT09PMDBPb09vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvT09PMDBPb09vIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIE8wT29vMG8gLCBPME9vMDBvME8gLCBvT09PMDBPb09vICkKIEkxMUlpaTExaTFJaTEgPSBJaWkxMUlpSTExaSAoIElpMTEgKQogT08wTyA9IEkxMUlpaTExaTFJaTEgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBpaUlJID0gSTExSWlpMTFpMUlpMSAuIHJlYWQgKCApCiBpMUlpMUlJID0gcmUgLiBzZWFyY2ggKCAnYWN0aW9uPSIoXFwvYWN0aW9uXFwvRG93bmxvYWRGaWxlXFw/bG9jYXRpb249ZmkmYW1wO2Y9Lio/KSIuKj9fX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbi4qP3ZhbHVlPSIoLio/KSInICwgaWlJSSApCiBvMG9PID0gJ2h0dHA6Ly8lcyVzJyAlICggc2VydmVyICwgaTFJaTFJSSAuIGdyb3VwICggMSApIC4gcmVwbGFjZSAoICcmYW1wOycgLCAnJicgKSApCiBPMDAwTzBPb09vID0gaTFJaTFJSSAuIGdyb3VwICggMiApCiBvT09PMDBPb09vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvT09PMDBPb09vIFsgJ1JlZmVyZXInIF0gPSBPME9vbzBvCiBvT09PMDBPb09vIFsgJ0Nvb2tpZScgXSA9IE9PME8KIG9PT08wME9vT28gWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogTzBPbzAwbzBPID0gJ2ZpbGVJZD0lcyZfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcycgJSAoIGxpbmsgLCBPMDAwTzBPb09vICkKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIG8wb08gLCBPME9vMDBvME8gLCBvT09PMDBPb09vICkKIEkxMUlpaTExaTFJaTEgPSBJaWkxMUlpSTExaSAoIElpMTEgKQogaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogaW1wb3J0IHRpbWUKIElpaSA9IHN0ciAoIGludCAoIHRpbWUgLiB0aW1lICggKSApICkgKyAnNDA0Jwogb28wb29vb08wTzAgPSAnaHR0cDovLyVzL2FjdGlvbi9PQXV0aC9GYWNlYm9vaz9UaW1lU3RhbXA9JXMnICUgKCBzZXJ2ZXIgLCBJaWkgKQogb09PTzAwT29PbyA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjUwLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTAuMCcgfQogb09PTzAwT29PbyBbICdSZWZlcmVyJyBdID0gTzBPb28wbwogb09PTzAwT29PbyBbICdDb29raWUnIF0gPSBPTzBPCiBvT09PMDBPb09vIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIE8wT28wMG8wTyA9IE5vbmUKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIG9vMG9vb29PME8wICwgTzBPbzAwbzBPICwgb09PTzAwT29PbyApCiBJMTFJaWkxMWkxSWkxID0gSWlpMTFJaUkxMWkgKCBJaTExICkKIE9PME8wMDBvb29PT08gPSBJMTFJaWkxMWkxSWkxIC4gaW5mbyAoICkgWyAnU2V0LUNvb2tpZScgXQogaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogSUkxaWlpaUkgPSBPTzBPIC4gc3BsaXQgKCAnOycgKQogaWlpaTExMSA9IE9PME8wMDBvb29PT08gLiBzcGxpdCAoICc7JyApCiBmb3Igb29vTzAwbzBvTyBpbiBpaWlpMTExIDoKICBpZiBvb29PMDBvMG9PIG5vdCBpbiBJSTFpaWlpSSA6CiAgIElJMWlpaWlJIC4gYXBwZW5kICggb29vTzAwbzBvTyApCiAgIGlmIDQ2IC0gNDY6IElJb29vTzBvb08wb28gLSBvb09vb08wT09PICUgSWlJSTFJaUkgLyBJSUlJCiBpaWlpMTExID0gWyBdCiBmb3Igb29vTzAwbzBvTyBpbiBJSTFpaWlpSSA6CiAgaWYgJ3BhdGg9Lycgbm90IGluIG9vb08wMG8wb08gYW5kICdIdHRwT25seScgbm90IGluIG9vb08wMG8wb08gOgogICBpaWlpMTExIC4gYXBwZW5kICggb29vTzAwbzBvTyApCiAgIGlmIDYxIC0gNjE6IElpSUkxaTFJIC8gaWkxSTFpaTFJaUlpMSAuIEkxICUgSUlJSSAtIG9vCiBPTzBPID0gJzsgJyAuIGpvaW4gKCBpaWlpMTExICkgLiByZXBsYWNlICggJyAgJyAsICcgJyApCiBpMWkgPSAnaHR0cDovLyVzL2FjdGlvbi9BY2NvdW50L0xvZ2luJyAlIHNlcnZlcgogb09PTzAwT29PbyA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjUwLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTAuMCcgfQogb09PTzAwT29PbyBbICdBY2NlcHQnIF0gPSAnKi8qJwogb09PTzAwT29PbyBbICdBY2NlcHQtTGFuZ3VhZ2UnIF0gPSAnZXMtRVMsZXM7cT0wLjgsZW4tVVM7cT0wLjUsZW47cT0wLjMnCiBvT09PMDBPb09vIFsgJ0FjY2VwdC1FbmNvZGluZycgXSA9ICdnemlwLCBkZWZsYXRlJwogb09PTzAwT29PbyBbICdDb250ZW50LVR5cGUnIF0gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Jwogb09PTzAwT29PbyBbICdYLVJlcXVlc3RlZC1XaXRoJyBdID0gJ1hNTEh0dHBSZXF1ZXN0Jwogb09PTzAwT29PbyBbICdSZWZlcmVyJyBdID0gTzBPb28wbwogb09PTzAwT29PbyBbICdDb29raWUnIF0gPSBPTzBPCiBvT09PMDBPb09vIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIE8wME9vMDBPID0gaWlJaWkxaSAoIGJhc2UgLCAna2JnJyApCiBPME9vMDBvME8gPSAnX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49JXMmVXNlck5hbWU9JXMmUGFzc3dvcmQ9JXMnICUgKCBPMDAwTzBPb09vICwgTzAwT28wME8gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgLCBPMDBPbzAwTyBbIDEgXSAuIGVuY29kZSAoICd1dGYtOCcgKSApCiBpZiAxNiAtIDE2OiBJMSAqIGlpMUkxaWkxSWlJaTEgLyBpMWlJMSAqIG9vb09vTyAqIElpMUkKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIGkxaSAsIE8wT28wMG8wTyAsIG9PT08wME9vT28gKQogSTExSWlpMTFpMUlpMSA9IElpaTExSWlJMTFpICggSWkxMSApCiB0cnkgOgogIE9PME8wMDBvb29PT08gPSBJMTFJaWkxMWkxSWkxIC4gaW5mbyAoICkgWyAnU2V0LUNvb2tpZScgXQogZXhjZXB0IDoKICByZXR1cm4gTzAwT28wME8gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgKyAnIyNOb0xvZ2luJwogaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogSUkxaWlpaUkgPSBPTzBPIC4gc3BsaXQgKCAnOycgKQogaWlpaTExMSA9IE9PME8wMDBvb29PT08gLiBzcGxpdCAoICc7JyApCiBmb3Igb29vTzAwbzBvTyBpbiBpaWlpMTExIDoKICBpZiBvb29PMDBvMG9PIG5vdCBpbiBJSTFpaWlpSSA6CiAgIElJMWlpaWlJIC4gYXBwZW5kICggb29vTzAwbzBvTyApCiAgIGlmIDIzIC0gMjM6IG9vb09vTyAvIG9PTyArIGkxaUkxICUgSWlJSTFJaUkKIGlpaWkxMTEgPSBbIF0KIGZvciBvb29PMDBvMG9PIGluIElJMWlpaWlJIDoKICBpZiAncGF0aD0vJyBub3QgaW4gb29vTzAwbzBvTyBhbmQgJ0h0dHBPbmx5JyBub3QgaW4gb29vTzAwbzBvTyA6CiAgIGlpaWkxMTEgLiBhcHBlbmQgKCBvb29PMDBvMG9PICkKICAgaWYgNzEgLSA3MTogSTFJaUkxSUlJMTFpIC4gb09PIC4gb28gKiBJaQogT08wTyA9ICc7ICcgLiBqb2luICggaWlpaTExMSApIC4gcmVwbGFjZSAoICcgICcgLCAnICcgKQogT08wTzAwMG9vb09PTyA9ICcnCiBvT09PMDBPb09vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvT09PMDBPb09vIFsgJ1JlZmVyZXInIF0gPSBPME9vbzBvCiBvT09PMDBPb09vIFsgJ0Nvb2tpZScgXSA9IE9PME8KIG9PT08wME9vT28gWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogTzBPbzAwbzBPID0gJ2ZpbGVJZD0lcyZfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcycgJSAoIGxpbmsgLCBPMDAwTzBPb09vICkKIElpaTExSWlJMTFpID0gdXJsbGliMiAuIHVybG9wZW4KIG9vME8wID0gdXJsbGliMiAuIFJlcXVlc3QKIElpMTEgPSBvbzBPMCAoIG8wb08gLCBPME9vMDBvME8gLCBvT09PMDBPb09vICkKIEkxMUlpaTExaTFJaTEgPSBJaWkxMUlpSTExaSAoIElpMTEgKQogaWlJSSA9IEkxMUlpaTExaTFJaTEgLiByZWFkICggKQogaTFJaTFJSSA9IHJlIC4gc2VhcmNoICggJ0Rvd25sb2FkVXJsIjoiKC4qPykiJyAsIGlpSUkgKQogcmV0dXJuIGkxSWkxSUkgLiBncm91cCAoIDEgKQogaWYgOTkgLSA5OTogSTEgJSBJaSAqIG8wMG9PMG9vME8wTzAgKyBpaUlJaTFpMUlpaQogaWYgNDkgLSA0OTogb09PICsgbzAwb08wb28wTzBPMCAtIEkxSWlJMUlJSTExaQpkZWYgSTExSTFJaWlJMUlJaSAoIGxpbmsgKSA6CiBvT09vT08gPSByZSAuIGZpbmRhbGwgKCAnbGlzdD0oLio/KSg/OiZ8XHN8JCkrJyAsIG9vMG8gKCBsaW5rICkgLCBmbGFncyA9IHJlIC4gRE9UQUxMICkKIGlJSTFpSUlpSWkxMUkgPSBbIF0KIGlmIGxlbiAoIG9PT29PTyApID4gMCA6CiAgZm9yIE8wME9vbzBvME9PIGluIG9PT29PTyA6CiAgIGlJSTFpSUlpSWkxMUkgLiBhcHBlbmQgKCAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheWxpc3QvJXMvJyAlIHN0ciAoIG9PT29PTyBbIDAgXSApICkKICByZXR1cm4gaUlJMWlJSWlJaTExSQogZWxzZSA6CiAgcmV0dXJuIE5vbmUKICBpZiA0MCAtIDQwOiBJSUlJICsgb28gLSBvb29Pb08gLiBPT08gLiBPT08gLiBPT29Pb08wbzBvME9PCmRlZiBvT29PMDBvMDAwb28gKCB0aXQgLCB2aWRlb1VybCApIDoKIE9PT29Pb09PTyA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKQogSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBwYXRoID0gdmlkZW9VcmwgKQogSTFpMUkxaUkxMUkgLiBzZXRJbmZvICggJ3ZpZGVvJyAsIHsgJ3RpdGxlJyA6IHRpdCB9ICkKIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIE9PT29Pb09PTyAsIFRydWUgLCBJMWkxSTFpSTExSSApCiBpZiAzNiAtIDM2OiBvb29Pb08gLiBvMDBvTzBvbzBPME8wICUgSWlJSTFpMUkgJSBJSUlJICUgSWlJSTFJaUkgKyBJaQpkZWYgb09Pb08wME9vICggcyApIDoKIHJldHVybiAnJyAuIGpvaW4gKCAoIGMgZm9yIGMgaW4gdW5pY29kZWRhdGEgLiBub3JtYWxpemUgKCAnTkZEJyAsIHMgKSBpZiB1bmljb2RlZGF0YSAuIGNhdGVnb3J5ICggYyApICE9ICdNbicgKSApCiBpZiA5NiAtIDk2OiBPT08gLyBJSSArIElpSUkxSWlJCiBpZiA3MiAtIDcyOiBJSW9vb08wb29PMG9vCmRlZiBvbzAgKCB0aXQgLCB2aWRlb1VybCApIDoKIHRpdCA9IG9PT29PMDBPbyAoIHVuaWNvZGUgKCB0aXQgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApCiBpZiAyMSAtIDIxOiBvT08KIEkxSUkxSUlpaWkgLCBvb29vT09vMDAgPSBvcyAuIHBhdGggLiBzcGxpdGV4dCAoIHZpZGVvVXJsICkKIGkxSUkxMUkxMTEgLCBpMWlJMTFJaUkxaUkxID0gb3MgLiBwYXRoIC4gc3BsaXRleHQgKCB0aXQgKQogaWYgNzcgLSA3Nzogb29vT29PIC8gSWkxSQogaWYgMzAgLSAzMDogSUlvb29PMG9vTzBvbyAtIGlpMUkxaWkxSWlJaTEgLiBPT08gLyBpMWlJMSAtIElJCiBpZiBub3Qgb29vb09PbzAwIGFuZCBub3QgaTFpSTExSWlJMWlJMSA6CiAgb29vb09PbzAwID0gJy5hdmknCiAgaWYgODggLSA4ODogSWkxSSAqIG9vICogSUlJSSArIG9vCiBpZiBub3QgdGl0IC4gZW5kc3dpdGggKCBvb29vT09vMDAgKSA6CiAgdGl0ID0gdGl0ICsgb29vb09PbzAwCiAgaWYgNDIgLSA0Mjogb09PIC4gb29Pb29PME9PTyAlIElJSUkgKyBJaUlJMWkxSQogIGlmIDU3IC0gNTc6IE9PTyAqIG9vb09vTyAqIEkxIC4gSTFJaUkxSUlJMTFpIC0gSWkKIGltcG9ydCB4Ym1jYWRkb24KIHRyeSA6CiAgaW1wb3J0IFNpbXBsZURvd25sb2FkZXIgYXMgZG93bmxvYWRlcgogIGRvd25sb2FkZXIgPSBkb3dubG9hZGVyIC4gU2ltcGxlRG93bmxvYWRlciAoICkKICBJMTExSTFpSWkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRG93bmxvYWRQYXRoJyApICkKICBpMWlpMWkxMWlJSSA9IHsgInVybCIgOiB2aWRlb1VybCAuIHN0cmlwICggKSAsICJkb3dubG9hZF9wYXRoIiA6IEkxMTFJMWlJaSAsICJmaWxlbmFtZSIgOiB0aXQgfQogIGRvd25sb2FkZXIgLiBkb3dubG9hZCAoIHRpdCAsIGkxaWkxaTExaUlJICkKICBpaUlJaWlJSTEgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogIGlpSUlpaUlJMSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnSW5pY2lhbmRvIERlc2NhcmdhLi4uJyAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDMwMDAgKQogZXhjZXB0IDoKICB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKICBPT29PMG9vMG9vMDAgPSAnQWRkb24gU2ltcGxlIERvd25sb2FkZXIgbm8gZW5jb250cmFkbywgcG9yIGVzbyBubyBzZSBwdWVkZSBkZXNjYXJnYXInCiAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKSAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogIGlpSUlpaUlJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogIGlmIDY1IC0gNjU6IElpMUkgLSBpMWlJMSAqIG9vCmRlZiBJaWlJaTFpMTFpICggc2VyICwgdGl0dWxvICwgYmFzZSAsIGlkICwgdHlwZSAsIGFjdGlvbiApIDoKIE9PT29Pb09PTyA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKQogaWYgYWN0aW9uID09ICdwbGF5JyA6CiAgYWN0aW9uID0gb09vTzAwbzAwMG9vCiAgdHJ5IDoKICAgSTExaUlpSUlpID0gemxpYiAuIGRlY29tcHJlc3MgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIEkxMTFJMTFJMTExMTEgKCBiYXNlICkgKSApCiAgIGlmIDQwIC0gNDA6IElJSUkKICAgSTFpID0gKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12UW1GelpVUmhkRzl6TDNacFpYZHpMbkJvY0Q5cFpEMGxjeVowZVhCbFBTVnonICkgKSAlICggSTExaUlpSUlpICwgaWQgLCB0eXBlICkKICAgSTFpaUkxSSAoIEkxaSApCiAgIGlmIDI0IC0gMjQ6IG9vT29vTzBPT08gJSBpaTFJMWlpMUlpSWkxICogSTFJaUkxSUlJMTFpICUgSUkgLyBvbyAvIG9vT29vTzBPT08KICAgSUlJaWkxSWkgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhc2UgKQogICBPTzBvID0gSUlJaWkxSWkgLiBjdXJzb3IgKCApCiAgIGlmIHR5cGUgPT0gJ3NlcmllcycgOgogICAgaWYgNTcgLSA1NzogSUlJSSAuIElJCiAgICBPTzBvIC4gZXhlY3V0ZSAoCiBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdkWEJrWVhSbElITmxjbWxsY3lCelpYUWdkbWxsZDNNOWRtbGxkM01yTVNCM2FHVnlaU0J6WlhKcFpWOXBaQ0E5SUQ4PScgKSAsCiAoIGlkICwgKSApCiAgIGVsc2UgOgogICAgaWYgNTMgLSA1MzogSUlJSSArIG9vICogaTFpSTEgLiBvT08gLSBJaUlJMUlpSSAuIElJSUkKICAgIE9PMG8gLiBleGVjdXRlICgKIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2RYQmtZWFJsSUhCbGJHbHpJSE5sZENCMmFXVjNjejEyYVdWM2N5c3hJSGRvWlhKbElIQmxiR2xmYVdRZ1BTQV8nICkgLCAoIGlkICwgKSApCiAgIElJSWlpMUlpIC4gY29tbWl0ICggKQogICBJSUlpaTFJaSAuIGNsb3NlICggKQogIGV4Y2VwdCA6CiAgIHBhc3MKIGVsc2UgOgogIGFjdGlvbiA9IG9vMAogIHRyeSA6CiAgIGlkID0gaWQgLiBzcGxpdCAoICctJyApIFsgMCBdCiAgIEkxMWlJaUlJaSA9IHpsaWIgLiBkZWNvbXByZXNzICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMTExSTExSTExMTExICggYmFzZSApICkgKQogICBpZiA4MCAtIDgwOiBJaSAtIElpMUkgJSBJMUlpSTFJSUkxMWkgLyBvbyAqIEkxSWlJMUlJSTExaSArIG8wMG9PMG9vME8wTzAKICAgSTFpID0gKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12UW1GelpVUmhkRzl6TDJSdmQyNHVjR2h3UDJsa1BTVnpKblI1Y0dVOUpYTT0nICkgKSAlICggSTExaUlpSUlpICwgaWQgLCB0eXBlICkKICAgSTFpaUkxSSAoIEkxaSApCiAgIGlmIDM1IC0gMzU6IGlpMUkxaWkxSWlJaTEgJSBJSUlJCiAgIElJSWlpMUlpID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBiYXNlICkKICAgT08wbyA9IElJSWlpMUlpIC4gY3Vyc29yICggKQogICBpZiB0eXBlID09ICdzZXJpZXMnIDoKICAgIGlmIDkwIC0gOTA6IElpMUkgKyBvb29Pb08gLyBvMDBvTzBvbzBPME8wCiAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2RYQmtZWFJsSUhObGNtbGxjeUJ6WlhRZ1pHOTNiajFrYjNkdUt6RWdkMmhsY21VZ2MyVnlhV1ZmYVdRZ1BTQV8nICkgLCAoIGlkICwgKSApCiAgIGVsc2UgOgogICAgaWYgNCAtIDQ6IG9PTyAvIGlpSUlpMWkxSWlpIC4gSUlvb29PMG9vTzBvbwogICAgaWYgMTAgLSAxMDogSWlJSTFpMUkgLSBvb29Pb08gKiBvT08gLSBJMUlpSTFJSUkxMWkKICAgIE9PMG8gLiBleGVjdXRlICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnZFhCa1lYUmxJSEJsYkdseklITmxkQ0JrYjNkdVBXUnZkMjRyTVNCM2FHVnlaU0J3Wld4cFgybGtJRDBnUHc9PScgKSAsICggaWQgLCApICkKICAgSUlJaWkxSWkgLiBjb21taXQgKCApCiAgIElJSWlpMUlpIC4gY2xvc2UgKCApCiAgZXhjZXB0IDoKICAgcGFzcwogb29vMG8gPSBzZXIgLiBzcGxpdCAoICcgJyApCiBpZiBub3Qgb29vMG8gOgogIE9Pb08wb28wb28wMCA9ICdWaWRlbyBlbiBwcmVwYXJhY2lceGMzXHhiM24nCiAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIE9PT29Pb09PTyAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogIGlpSUlpaUlJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogZm9yIE8wME9vbzBvME9PIGluIHhyYW5nZSAoIGxlbiAoIG9vbzBvICkgKSA6CiAgSWlpaTFJaUlJSUlpaUlpID0gb28wbyAoIG9vbzBvIFsgTzAwT29vMG8wT08gXSApCiAgaTFJSUkgPSBPT28wb28gKCBJaWlpMUlpSUlJSWlpSWkgLCBGYWxzZSApCiAgaWYgNjMgLSA2MzogSUlvb29PMG9vTzBvbyAlIGkxaUkxCiAgaWYgODUgLSA4NTogSWlJSTFpMUkgLyBvT08gJSBJSUlJICogSUlJSQogIElJSWkxSTExMWlJMSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggdGl0dWxvICkKICBpZiA2MyAtIDYzOiBPT08gLyBvbyAtIGkxaUkxIC0gSUlJSSAtIG9vT29vTzBPT08KICBpZiAyMiAtIDIyOiBJSUlJIC8gb09PICsgSWkxSSArIG9PTyAvIElJSUkgLSBJMUlpSTFJSUkxMWkKICBpZiAzMSAtIDMxOiBPT08KICBpZiAxMSAtIDExOiBJMUlpSTFJSUkxMWkKICBpZiAxMCAtIDEwOiBvb29Pb08gLSBPT08gLyBvbyAvIElpMUkKICBpZiA3NSAtIDc1OiBvb29Pb08gLiBJSUlJCiAgaWYgMzAgLSAzMDogSWlJSTFJaUkgJSBPT08gLiBJMQogIGlmIDY4IC0gNjg6IElJb29vTzBvb08wb28gJSBpMWlJMSAuIGlpMUkxaWkxSWlJaTEKICBpZiBpMUlJSSA9PSAna2InIDoKICAgdHJ5IDoKICAgIElpMTFpMSA9IG9vME8wb29vICggJ2tiYWdpLmNvbScgLCBJaWlpMUlpSUlJSWlpSWkgLCBiYXNlICkKICAgIGlmIElpMTFpMSA9PSAnJyBhbmQgTzAwT29vMG8wT08gPT0gbGVuICggb29vMG8gKSAtIDEgOgogICAgIE9Pb08wb28wb28wMCA9ICdFbCBlbmxhY2UgeWEgbm8gZXhpc3RlJwogICAgIEkxaTFJMWlJMTFJID0geGJtY2d1aSAuIExpc3RJdGVtICggT09vTzBvbzBvbzAwICwgaWNvbkltYWdlID0gJ0RlZmF1bHRWaWRlby5wbmcnICkKICAgICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBPT09vT29PT08gLCBGYWxzZSAsIEkxaTFJMWlJMTFJICkKICAgICBpaUlJaWlJSTEgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgIGlpSUlpaUlJMSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBPT29PMG9vMG9vMDAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICAgICBicmVhawogICAgZWxpZiBJaTExaTEgLiBlbmRzd2l0aCAoICdOb0xvZ2luJyApIGFuZCBPMDBPb28wbzBPTyA9PSBsZW4gKCBvb28wbyApIC0gMSA6CiAgICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ0thYmFnaTogVXN1YXJpbyAoJXMpIHkgQ29udHJhc2XDsWEgaW5jb3JyZWN0YXMnICUgSWkxMWkxIC4gc3BsaXQgKCAnIyMnICkgWyAwIF0gLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA4MDAwICkKICAgICBicmVhawogICAgZWxpZiBub3QgSWkxMWkxIC4gZW5kc3dpdGggKCAnTm9Mb2dpbicgKSA6CiAgICAgYWN0aW9uICggSUlJaTFJMTExaUkxICwgb28wTzBvb28gKCAna2JhZ2kuY29tJyAsIElpaWkxSWlJSUlJaWlJaSAsIGJhc2UgKSApCiAgICAgYnJlYWsKICAgZXhjZXB0IEhUVFBFcnJvciA6CiAgICBpZiBPMDBPb28wbzBPTyA9PSBsZW4gKCBvb28wbyApIC0gMSA6CiAgICAgT09vTzBvbzBvbzAwID0gJ0VsIHNlcnZpZG9yIEtCIHBhcmVjZSBjYWlkbywgaW50ZW50YWxvIG1hcyB0YXJkZScKICAgICBJMWkxSTFpSTExSSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIE9Pb08wb28wb28wMCAsIGljb25JbWFnZSA9ICdEZWZhdWx0VmlkZW8ucG5nJyApCiAgICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggT09Pb09vT09PICwgRmFsc2UgLCBJMWkxSTFpSTExSSApCiAgICAgaWlJSWlpSUkxID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgICBpaUlJaWlJSTEgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgT09vTzBvbzBvbzAwICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiAgZWxpZiBpMUlJSSA9PSAnZGsnIDoKICAgdHJ5IDoKICAgIElpMTFpMSA9IG9PMDAwb09PMDBvbzAgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdhSFIwY0RvdkwyUnBjMnR2YTI5emJXbHJieTV0ZUE9PScgKSAsIElpaWkxSWlJSUlJaWlJaSApCiAgICBpZiBJaTExaTEgPT0gJycgYW5kIE8wME9vbzBvME9PID09IGxlbiAoIG9vbzBvICkgLSAxIDoKICAgICBPT29PMG9vMG9vMDAgPSAnRWwgZW5sYWNlIHlhIG5vIGV4aXN0ZScKICAgICBJMWkxSTFpSTExSSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIE9Pb08wb28wb28wMCAsIGljb25JbWFnZSA9ICdEZWZhdWx0VmlkZW8ucG5nJyApCiAgICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggT09Pb09vT09PICwgRmFsc2UgLCBJMWkxSTFpSTExSSApCiAgICAgaWlJSWlpSUkxID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgICBpaUlJaWlJSTEgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgT09vTzBvbzBvbzAwICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiAgICAgYnJlYWsKICAgIGVsaWYgSWkxMWkxICE9ICcnIDoKICAgICBhY3Rpb24gKCBJSUlpMUkxMTFpSTEgLCBJaTExaTEgKQogICAgIGJyZWFrCiAgIGV4Y2VwdCBIVFRQRXJyb3IgOgogICAgaWYgTzAwT29vMG8wT08gPT0gbGVuICggb29vMG8gKSAtIDEgOgogICAgIE9Pb08wb28wb28wMCA9ICdFbCBzZXJ2aWRvciBESyBwYXJlY2UgY2FpZG8sIGludGVudGFsbyBtYXMgdGFyZGUnCiAgICAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogICAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIE9PT29Pb09PTyAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogICAgIGlpSUlpaUlJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogIGVsaWYgaTFJSUkgPT0gJ3JlJyBvciBpMUlJSSA9PSAneXQnIG9yIGkxSUlJID09ICdzdGFuZGFyZCcgOgogICBpZiBpMUlJSSA9PSAneXQnIDoKICAgIElpMTFpMSA9IEkxMUkxSWlpSTFJSWkgKCBJaWlpMUlpSUlJSWlpSWkgKQogICBlbHNlIDoKICAgIElpMTFpMSA9IElpaWkxSWlJSUlJaWlJaQogICBhY3Rpb24gKCBJSUlpMUkxMTFpSTEgLCBJaTExaTEgKQogICBicmVhawogIGVsaWYgaTFJSUkgPT0gJ3NjJyA6CiAgIEkxaSA9IElpaWkxSWlJSUlJaWlJaQogICB0cnkgOgogICAgaWlJSSA9IEkxaWlJMUkgKCBJaWlpMUlpSUlJSWlpSWkgKQogICAgaWYgJzxoMT5GaWxlIE5vdCBGb3VuZDwvaDE+JyBpbiBpaUlJIG9yICc8aDE+QXJjaGl2byBubyBlbmNvbnRyYWRvPC9oMT4nIGluIGlpSUkgb3IgaWlJSSA9PSAnTm90IEZvdW5kJyA6CiAgICAgaWYgTzAwT29vMG8wT08gPT0gbGVuICggb29vMG8gKSAtIDEgOgogICAgICBPT29PMG9vMG9vMDAgPSAnRWwgZW5sYWNlIHlhIG5vIGV4aXN0ZScKICAgICAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogICAgICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBPT09vT29PT08gLCBGYWxzZSAsIEkxaTFJMWlJMTFJICkKICAgICAgaWlJSWlpSUkxID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgICAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogICAgZWxzZSA6CiAgICAgSWkxMWkxID0gcmUgLiBmaW5kYWxsICggJ2ZpbGVcXDogIihbXiJdKykiJyAsIGlpSUkgLCBmbGFncyA9IHJlIC4gRE9UQUxMICkKICAgICBpZiBub3QgSWkxMWkxIDoKICAgICAgTzBPbzAwbzBPID0gJycKICAgICAgT09Pb09PT09vMG8wbyA9IHJlIC4gZmluZGFsbCAoICc8aW5wdXQuKj9uYW1lPSIoW14iXSspIi4qP3ZhbHVlPSIoW14iXSopIj4nICwgaWlJSSAsIGZsYWdzID0gcmUgLiBET1RBTEwgKQogICAgICBmb3IgaWkxMTFJMWkgLCBvb09PTzAwb08gaW4gT09Pb09PT09vMG8wbyA6CiAgICAgICBPME9vMDBvME8gKz0gaWkxMTFJMWkgKyAnPScgKyBvb09PTzAwb08gKyAnJicKICAgICAgIGlmIDQ0IC0gNDQ6IG9PTyAvIEkxSWlJMUlJSTExaSAvIGlpSUlpMWkxSWlpCiAgICAgIE8wT28wMG8wTyA9IE8wT28wMG8wTyAuIHJlcGxhY2UgKCAnb3A9ZG93bmxvYWQxJyAsICdvcD1kb3dubG9hZDInICkKICAgICAgaWlJSSA9IEkxaWlJMUkgKCBJMWkgLCBwb3N0ID0gTzBPbzAwbzBPICkKICAgICAgaWYgJ2lkPSJqdXN0YW5vdGljZSInIGluIGlpSUkgOgogICAgICAgcmV0dXJuIFsgXQogICAgICBJaTExaTEgPSByZSAuIGZpbmRhbGwgKCAnZmlsZVxcOiAiKFteIl0rKSInICwgaWlJSSAsIGZsYWdzID0gcmUgLiBET1RBTEwgKQogICAgIHRyeSA6CiAgICAgIGFjdGlvbiAoIElJSWkxSTExMWlJMSAsIElpMTFpMSBbIDAgXSApCiAgICAgIGJyZWFrCiAgICAgZXhjZXB0IDoKICAgICAgcGFzcwogICBleGNlcHQgSFRUUEVycm9yIDoKICAgIGlmIE8wME9vbzBvME9PID09IGxlbiAoIG9vbzBvICkgLSAxIDoKICAgICBPT29PMG9vMG9vMDAgPSAnRWwgc2Vydmlkb3IgU3RyZWFtQ2xvdWQgcGFyZWNlIGNhaWRvLCBpbnRlbnRhbG8gbWFzIHRhcmRlJwogICAgIEkxaTFJMWlJMTFJID0geGJtY2d1aSAuIExpc3RJdGVtICggT09vTzBvbzBvbzAwICwgaWNvbkltYWdlID0gJ0RlZmF1bHRWaWRlby5wbmcnICkKICAgICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBPT09vT29PT08gLCBGYWxzZSAsIEkxaTFJMWlJMTFJICkKICAgICBpaUlJaWlJSTEgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgIGlpSUlpaUlJMSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBPT29PMG9vMG9vMDAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICBlbHNlIDoKICAgdHJ5IDoKICAgIGltcG9ydCB1cmxyZXNvbHZlcgogICBleGNlcHQgOgogICAgdHJhY2ViYWNrIC4gcHJpbnRfZXhjICggZmlsZSA9IHN5cyAuIHN0ZG91dCApCiAgICBPT29PMG9vMG9vMDAgPSAnQWRkb24gc2NyaXB0Lm1vZHVsZS51cmxyZXNvbHZlciBubyBlbmNvbnRyYWRvJwogICAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggT09Pb09vT09PICwgRmFsc2UgLCBJMWkxSTFpSTExSSApCiAgICBpaUlJaWlJSTEgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDcwMDAgKQogICB0cnkgOgogICAgSWkxMWkxID0gdXJscmVzb2x2ZXIgLiByZXNvbHZlICggSWlpaTFJaUlJSUlpaUlpICkKICAgIGlmIElpMTFpMSA9PSBGYWxzZSA6CiAgICAgT09vID0geGJtY2FkZG9uIC4gQWRkb24gKCBpZCA9ICJzY3JpcHQubW9kdWxlLnVybHJlc29sdmVyIiApCiAgICAgT09vTzBvbzBvbzAwID0gJ1NlcnZpZG9yIG5vIHNvcG9ydGFkbyBvIGNvbiBnZW8uIHNjcmlwdC5tb2R1bGUudXJscmVzb2x2ZXIgJXMgJyAlIE9PbyAuIGdldEFkZG9uSW5mbyAoICd2ZXJzaW9uJyApCiAgICAgSTFpMUkxaUkxMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBPT29PMG9vMG9vMDAgLCBpY29uSW1hZ2UgPSAnRGVmYXVsdFZpZGVvLnBuZycgKQogICAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIE9PT29Pb09PTyAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogICAgIGlpSUlpaUlJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICAgaWlJSWlpSUkxIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDEwMDAwICkKICAgIGVsc2UgOgogICAgIGFjdGlvbiAoIElJSWkxSTExMWlJMSAsIElpMTFpMSApCiAgIGV4Y2VwdCA6CiAgICB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKICAgIE9Pb08wb28wb28wMCA9ICdFcnJvciBlbiBVUkxSZXNvbHZlciwgcG9zaWJsZSBwcm9ibGVtYSBjb24gR2VvLicKICAgIEkxaTFJMWlJMTFJID0geGJtY2d1aSAuIExpc3RJdGVtICggT09vTzBvbzBvbzAwICwgaWNvbkltYWdlID0gJ0RlZmF1bHRWaWRlby5wbmcnICkKICAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIE9PT29Pb09PTyAsIEZhbHNlICwgSTFpMUkxaUkxMUkgKQogICAgaWlJSWlpSUkxID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgIGlpSUlpaUlJMSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBPT29PMG9vMG9vMDAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA3MDAwICkKICAgIGlmIDU3IC0gNTc6IGlpSUlpMWkxSWlpICogSUlvb29PMG9vTzBvbwogICAgaWYgODcgLSA4Nzogb09PICogSTEgKiBvb29Pb08gLSBvMDBvTzBvbzBPME8wCiAgICBpZiA4NSAtIDg1OiBJMUlpSTFJSUkxMWkgKyBJMUlpSTFJSUkxMWkgKiBJMUlpSTFJSUkxMWkKICAgIGlmIDM4IC0gMzg6IElJb29vTzBvb08wb28gLyBvb29Pb08gKyBPT08gKiBpSWkxMSAlIElpSUkxaTFJIC8gaWkxSTFpaTFJaUlpMQpkZWYgb29PICggYmFzICwgZGF0YSApIDoKIElJSWkxSWlpaUkxID0gZGF0YSAuIHNwbGl0ICggJy4nICkKIGlmIElJSWkxSWlpaUkxIFsgMCBdID09ICdjcCcgOgogIElJSWkxSWlpaUkxID0gb28wTzBvb28gKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdZMjl3YVdGd2IzQXVZMjl0JyApICwgSUlJaTFJaWlpSTEgWyAxIF0gLCBiYXMgKQogZWxpZiBJSUlpMUlpaWlJMSBbIDAgXSA9PSAnZGsnIDoKICBJSUlpMUlpaWlJMSA9IG9PMDAwb09PMDBvbzAgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdhSFIwY0RvdkwyUnBjMnR2YTI5emJXbHJieTV0ZUE9PScgKSAsIElJSWkxSWlpaUkxIFsgMSBdICkKIGVsc2UgOgogIGlmIDg4IC0gODg6IElpSUkxSWlJIC8gSWlJSTFJaUkgKyBJSSAlIG9vCiAgSUlJaTFJaWlpSTEgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12Ylc5eWFXRXVZMjF3JyApICUgZGF0YQogZGF0YSA9IEkxaWlJMUkgKCBJSUlpMUlpaWlJMSApCiB0cnkgOgogIGRhdGEgPSB6bGliIC4gZGVjb21wcmVzcyAoIGRhdGEgKQogZXhjZXB0IDoKICB4Ym1jIC4gbG9nICggJ1thZGRvbi5QYWxhbnRpcl0gRXJyb3IgZGVjcnlwdCBiZCAlcycgJSAoIGRhdGEgKSApCiAgcGFzcwogaTFpaWkxSWlJaSA9IG9wZW4gKCBiYXMgLCAnd2InICkKIGkxaWlpMUlpSWkgLiB3cml0ZSAoIGRhdGEgKQogaTFpaWkxSWlJaSAuIGNsb3NlICggKQogdHJ5IDoKICBJSUlpaTFJaSA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmFzICkKICBPTzBvID0gSUlJaWkxSWkgLiBjdXJzb3IgKCApCiAgaWYgNTkgLSA1OTogSTEKICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyVnNaV04wSUhabGNuTnBiMjRzSUNoelpXeGxZM1FnWTI5MWJuUW9LaWtnWm5KdmJTQW9jMlZzWldOMElHeHBibXNnWm5KdmJTQnpaWEpwWlhNZ2QyaGxjbVVnYkdsdWF5QjFibWx2YmlCelpXeGxZM1FnYkdsdWF5Qm1jbTl0SUhCbGJHbHpLU2tnWm5KdmJTQjJaWEp6YVc5dScgKSApCiAgb29PME8gPSBPTzBvIC4gZmV0Y2hvbmUgKCApCiAgSUlJaWkxSWkgLiBjbG9zZSAoICkKICBPT29PMG9vMG9vMDAgPSAnVmVycy4gJXMgKE3DoXMgZGUgJXMgY29udGVuaWRvcyBkaWZlcmVudGVzKScgJSAoIG9vTzBPIFsgMCBdICwgb29PME8gWyAxIF0gKQogIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsIE9Pb08wb28wb28wMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogZXhjZXB0IERhdGFiYXNlRXJyb3IgYXMgbzBvMDAwME8wIDoKICBpZiA4NCAtIDg0OiBJaUlJMUlpSSAuIG9vT29vTzBPT08gJSBvb29Pb08gKiBpSWkxMSArIG9vb09vTwogIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGJhcyApIDoKICAgb3MgLiByZW1vdmUgKCBiYXMgKQogICBpZiAyNSAtIDI1OiBpSWkxMSArIElpIC0gSWkxSQogIHJhaXNlIG8wbzAwMDBPMAogIGlmIDc3IC0gNzc6IEkxSWlJMUlJSTExaQpkZWYgaWlJaWkxaSAoIGJhcyAsIHByb3ZpZGVyICkgOgogSUlJaWkxSWkgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiBPTzBvID0gSUlJaWkxSWkgLiBjdXJzb3IgKCApCiBpZiA0IC0gNDogSUlvb29PMG9vTzBvbyAuIElpSUkxaTFJIC0gSUkgKyBJSSAqIGkxaUkxCiBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyVnNaV04wSUdOeVpXUmxiblJwWVd4eklHWnliMjBnZG1WeWMybHZiZz09JyApICkKIG9vTzBPID0gT08wbyAuIGZldGNob25lICggKQogSUlJaWkxSWkgLiBjbG9zZSAoICkKIGlmIG9vTzBPIFsgMCBdIDoKICBJaUlpSUlpMSA9IG9vTzBPIFsgMCBdIC4gc3BsaXQgKCAnIyMnICkKICBmb3IgTzAwT29vMG8wT08gaW4geHJhbmdlICggbGVuICggSWlJaUlJaTEgKSAvIDMgKSA6CiAgIGlmIElpSWlJSWkxIFsgTzAwT29vMG8wT08gXSA9PSBwcm92aWRlciA6CiAgICByZXR1cm4gWyBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJyVzVXNlck5hbWUnICUgcHJvdmlkZXIgKSBvciBJaUlpSUlpMSBbIE8wME9vbzBvME9PICsgMSBdICwKIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnJXNQYXNzd29yZCcgJSBwcm92aWRlciApIG9yIElpSWlJSWkxIFsgTzAwT29vMG8wT08gKyAyIF0gXQogICAgaWYgODcgLSA4NzogaTFpSTEgLiBJMUlpSTFJSUkxMWkgLSBJSW9vb08wb29PMG9vIC0gT09vT29PMG8wbzBPTyAqIE9PTwogcmV0dXJuIFsgJ3Rlc3QnIF0gKiAyCiBpZiA2MCAtIDYwOiBJaTFJIC0gSUlvb29PMG9vTzBvbyAuIG8wMG9PMG9vME8wTzAgLiBJSSAuIG9vT29vTzBPT08gKiBJaUlJMWkxSQogaWYgODUgLSA4NTogSUkKZGVmIE9Pb28wTzBvICggYmFzICkgOgogSTExaUlpSUlpID0gSTExMUkxMUkxMTExMSAoIGJhcyApCiBpZiBJMTFpSWlJSWkgPT0gJycgOgogIEkxMWlJaUlJaSA9IE9PbzAwMDBvTyAoICkKIEkxMWlJaUlJaSA9IHpsaWIgLiBkZWNvbXByZXNzICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMTFpSWlJSWkgKSApCiBpbXBvcnQgeGJtY2FkZG9uCiBpaWlpSTFJSWkgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkKIGlJaUlpSWlJaWkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIGlpaWlJMUlJaSAuIGdldEFkZG9uSW5mbyAoICdwYXRoJyApIC4gZGVjb2RlICggJ3V0Zi04JyApICkKIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGJhcyApIDoKICB0cnkgOgogICBpZiAyNiAtIDI2OiBvb09vb08wT09PIC4gSUkgJSBJaUlJMWkxSSAvIG9vb09vTyAvIGkxaUkxIC0gb28KICAgb29PME8gPSBJMWlpSTFJICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnSlhNdlltRnNjbTluTG1sdVptOD0nICkgJSBJMTFpSWlJSWkgKQogICBpZiA2NyAtIDY3OiBpaUlJaTFpMUlpaSAuIEkxSWlJMUlJSTExaQogICBpMUlJSWlJaTFJMTEgPSBvb08wTyAuIHNwbGl0ICggJyAnICkKICAgdHJ5IDoKICAgIElJSWlpMUlpID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBiYXMgKQogICAgT08wbyA9IElJSWlpMUlpIC4gY3Vyc29yICggKQogICAgaWYgOTMgLSA5MzogT09PICUgaTFpSTEgLSBPT29Pb08wbzBvME9PICUgb09PCiAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ1UyVnNaV04wSUhabGNuTnBiMjRzSUhabGNuTnBiMjVmWVdSa2IyNHNJR1JoZEdFZ1puSnZiU0IyWlhKemFXOXUnICkgKQogICAgb08gPSBPTzBvIC4gZmV0Y2hvbmUgKCApCiAgICBJSUlpaTFJaSAuIGNsb3NlICggKQogICAgbzAgPSBzdHIgKCBvTyBbIDAgXSApCiAgICBpZiBpbnQgKCBvMCApIDwgaW50ICggaTFJSUlpSWkxSTExIFsgMCBdICkgOgogICAgIGlmIDM1IC0gMzU6IElpSUkxSWlJIC4gSUlvb29PMG9vTzBvbyAqIG8wMG9PMG9vME8wTzAgLSBPT08gKiBJaUlJMWkxSSAuIEkxSWlJMUlJSTExaQogICAgIG9vTyAoIGJhcyAsIG9vMG8gKCBpMUlJSWlJaTFJMTEgWyAxIF0gLiBzdHJpcCAoICkgKSApCiAgICAgSUlJaWkxSWkgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiAgICAgT08wbyA9IElJSWlpMUlpIC4gY3Vyc29yICggKQogICAgIGlmIDgwIC0gODA6IElJIC0gb28gLyBJMUlpSTFJSUkxMWkKICAgICBPTzBvIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ2MyVnNaV04wSUcxbGJuTmhhbVZmZFhCa1lYUmxMQ0J1YjNScFptbGpZV05wYjI1ZmRYQmtZWFJsSUdaeWIyMGdkbVZ5YzJsdmJnPT0nICkgKQogICAgIG9PID0gT08wbyAuIGZldGNob25lICggKQogICAgIElJSWlpMUlpIC4gY2xvc2UgKCApCiAgICAgaWYgb08gWyAxIF0gOgogICAgICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvTyBbIDEgXSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDkwMDAgKQogICAgIGlmIG9PIFsgMCBdIDoKICAgICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBvayAoICdQYWxhbnRpcicgLCBvTyBbIDAgXSApCiAgIGV4Y2VwdCA6CiAgICBvb08gKCBiYXMgLCBvbzBvICggaTFJSUlpSWkxSTExIFsgMSBdIC4gc3RyaXAgKCApICkgKQogIGV4Y2VwdCAoIEhUVFBFcnJvciAsIFVSTEVycm9yICkgYXMgbzBvMDAwME8wIDoKICAgdHJhY2ViYWNrIC4gcHJpbnRfZXhjICggZmlsZSA9IHN5cyAuIHN0ZG91dCApCiAgIE9Pb08wb28wb28wMCA9ICdFbCBwbHVnaW4gbm8gcHVlZGUgc2VyIGFjdHVhbGl6YWRvJwogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBPT29PMG9vMG9vMDAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKIGVsc2UgOgogIHRyeSA6CiAgIGlmIDQ4IC0gNDg6IG9vIC8gb29Pb29PME9PTyAuIG9vICogb09PICsgbzAwb08wb28wTzBPMAogICBpZiA2OCAtIDY4OiBJaUlJMWkxSSAqIG9vICUgSUlJSSAqIElpMUkgKiBPT29Pb08wbzBvME9PCiAgIG9vTzBPID0gSTFpaUkxSSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ0pYTXZZbUZzY205bkxtbHVabTg9JyApICUgSTExaUlpSUlpICkKICAgaTFJSUlpSWkxSTExID0gb29PME8gLiBzcGxpdCAoICcgJyApCiAgIG9vTyAoIGJhcyAsIG9vMG8gKCBpMUlJSWlJaTFJMTEgWyAxIF0gLiBzdHJpcCAoICkgKSApCiAgIElJSWlpMUlpID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBiYXMgKQogICBPTzBvID0gSUlJaWkxSWkgLiBjdXJzb3IgKCApCiAgIGlmIDkxIC0gOTE6IElpMUkgKyBJMSAqIG9vIC8gSUlvb29PMG9vTzBvbyAlIGkxaUkxICUgb29vT29PCiAgIE9PMG8gLiBleGVjdXRlICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCAnYzJWc1pXTjBJRzFsYm5OaGFtVmZhVzVwWTJsaGJDQm1jbTl0SUhabGNuTnBiMjQ9JyApICkKICAgb08gPSBPTzBvIC4gZmV0Y2hvbmUgKCApCiAgIElJSWlpMUlpIC4gY2xvc2UgKCApCiAgIGlmIG9PIFsgMCBdIDoKICAgIHhibWNndWkgLiBEaWFsb2cgKCApIC4gb2sgKCAnUGFsYW50aXInICwgb08gWyAwIF0gKQogIGV4Y2VwdCBIVFRQRXJyb3IgOgogICBPT29PMG9vMG9vMDAgPSAnRWwgcGx1Z2luIG5vIHNlIHB1ZWRlIGNhcmdhcicKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgT09vTzBvbzBvbzAwICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9FUlJPUiAsIDUwMDAgKQogICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAnQWN0aW9uKEJhY2spJyApCiAgIGlmIDkgLSA5OiBvMDBvTzBvbzBPME8wCiBpZiBvcyAuIHBhdGggLiBpc2ZpbGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdKWE12YVhSb2FXd3VjSGs9JyApICUgaUlpSWlJaUlpaSApIDoKICBvcyAuIHJlbW92ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ0pYTXZhWFJvYVd3dWNIaz0nICkgJSBpSWlJaUlpSWlpICkKICBpZiA1MiAtIDUyOiBPT08gLSBPT08gKiBvb29Pb08gKiBvb09vb08wT09PICsgbzAwb08wb28wTzBPMCArIG9vT29vTzBPT08KIElJSWlpMUlpID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBiYXMgKQogT08wbyA9IElJSWlpMUlpIC4gY3Vyc29yICggKQogaWYgNTkgLSA1OTogSTEgKiBJMUlpSTFJSUkxMWkgLSBpaTFJMWlpMUlpSWkxICUgSWkgLyBJMQogT08wbyAuIGV4ZWN1dGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoICdVMlZzWldOMElIWmxjbk5wYjI0c0lIWmxjbk5wYjI1ZllXUmtiMjRzSUdSaGRHRWdabkp2YlNCMlpYSnphVzl1JyApICkKIG9PID0gT08wbyAuIGZldGNob25lICggKQogSUlJaWkxSWkgLiBjbG9zZSAoICkKIE9PTzBvTzBvID0gaWlpaUkxSUlpIC4gZ2V0QWRkb25JbmZvICggJ3ZlcnNpb24nICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIGlmIGludCAoIE9PTzBvTzBvIC4gcmVwbGFjZSAoICcuJyAsICcnICkgKSA8IG9PIFsgMSBdIDoKICBPME8gPSBvTyBbIDIgXSAuIHNwbGl0ICggJyAnICkKICBmb3IgTzAwT29vMG8wT08gLCBvME9PbzBPb09vT28gaW4gemlwICggTzBPIFsgMCA6IDogMiBdICwgTzBPIFsgMSA6IDogMiBdICkgOgogICBpaUlJID0gemxpYiAuIGRlY29tcHJlc3MgKCBiYXNlNjQgLiBiNjRkZWNvZGUgKCBvME9PbzBPb09vT28gKSApCiAgIGkxaWlpMUlpSWkgPSBvcGVuICggJyVzLyVzJyAlICggaUlpSWlJaUlpaSAsIGJhc2U2NCAuIGI2NGRlY29kZSAoIE8wME9vbzBvME9PICkgKSAsICd3YicgKQogICBpMWlpaTFJaUlpIC4gd3JpdGUgKCBpaUlJICkKICAgaTFpaWkxSWlJaSAuIGNsb3NlICggKQogICBpZiA3MSAtIDcxOiBvb29Pb08gKiBJaSAvIGlpMUkxaWkxSWlJaTEgLSBJMUlpSTFJSUkxMWkKIyA4MDdjYjFiZmZmYjIzNGRhY2UzZjkzMGY1NzFhOTAzOWQ3NmY0Y2Y5Cg==')